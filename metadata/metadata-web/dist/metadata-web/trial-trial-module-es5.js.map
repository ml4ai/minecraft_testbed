{"version":3,"sources":["webpack:///src/app/experiment/experiment.service.ts","webpack:///src/app/trial/create-trial/create-trial.component.ts","webpack:///src/app/trial/create-trial/create-trial.component.html","webpack:///src/app/trial/delete-trial/delete-trial.component.ts","webpack:///src/app/trial/delete-trial/delete-trial.component.html","webpack:///src/app/trial/json-trial/json-trial.component.ts","webpack:///src/app/trial/json-trial/json-trial.component.html","webpack:///src/app/trial/trial-routing.module.ts","webpack:///src/app/trial/trial.module.ts","webpack:///src/app/trial/trial.service.ts","webpack:///src/app/trial/trials/trials.component.ts","webpack:///src/app/trial/trials/trials.component.html","webpack:///src/app/trial/update-trial/update-trial.component.ts","webpack:///src/app/trial/update-trial/update-trial.component.html"],"names":["moment","ExperimentService","http","loggingService","mqttService","experimentsUrl","metadataAppUrl","httpOptions","headers","get","pipe","_","log","handleError","id","url","experiments","h","outcome","experimentId","term","trim","x","length","experiment","post","newExperiment","experimentMessage","publish","JSON","stringify","qos","put","messageType","sub_type","source","version","header","timestamp","date","message_type","testbedVersion","msg","experiment_id","toDate","toISOString","data","name","author","mission","operation","result","error","console","message","add","providedIn","CreateTrialComponent","formBuilder","dialogRef","experimentService","jsonDialog","createTrialForm","group","trial_id","required","experimenter","subjects","trial_number","group_number","study_number","condition","notes","testbed_version","useMessageBus","uuidPattern","RegExp","readExperiments","subscribe","dialogResult","value","subjectsText","split","notesText","jsonDialogRef","open","panelClass","afterClosed","trial","parse","json","find","e","patchValue","join","close","event","e1","e2","toggleUseMessageBusChange","openJsonTrialDialog","onGenerateUUIDClick","onCancelClick","onCreateClick","selector","templateUrl","styleUrls","DeleteTrialComponent","deleteTrialForm","getRawValue","setValue","disable","onDeleteClick","JsonTrialComponent","jsonTrialForm","onParseClick","routes","path","component","TrialRoutingModule","forChild","imports","exports","TrialModule","declarations","TrialService","trialsUrl","trials","uuid","index","exist","newTrial","trialMessage","replay_id","replay_parent_id","replay_parent_type","experiment_name","experiment_date","experiment_author","experiment_mission","trialExportMessage","metadata","TrialsComponent","trialService","mediaObserver","createDialog","updateDialog","deleteDialog","overlay","dataSource","currentScreenWidth","trialCreatedSubscription","observe","TextDecoder","decode","payload","read","overlayRef","create","positionStrategy","position","global","centerHorizontally","centerVertically","hasBackdrop","flexMediaWatcher","asObservable","changes","change","mqAlias","setupTable","unsubscribe","displayedColumns","filterValue","target","filter","toLowerCase","attach","setTimeout","detach","createTrial","t","push","sort","paginator","table","renderRows","createTrialMessage","readTrials","updateTrial","deleteTrial","success","splice","generateTrialMessage","createMessage","update","applyFilter","UpdateTrialComponent","updateTrialForm","onUpdateClick"],"mappings":"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","file":"trial-trial-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { Experiment } from './experiment';\r\nimport { ExperimentMessage } from './experiment-message';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { environment } from '../../environments/environment';\r\nimport { MqttService } from 'ngx-mqtt';\r\nimport { Trial } from '../trial/trial';\r\nimport { TrialMessage } from '../trial/trial-message';\r\n// import moment from 'moment';\r\n\r\nconst moment = require('moment');\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExperimentService {\r\n  private experimentsUrl = environment.metadataAppUrl + '/experiments';  // URL to web api\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private loggingService: LoggingService,\r\n    private mqttService: MqttService\r\n  ) { }\r\n\r\n  /** GET experiments from the server */\r\n  readExperiments(): Observable<Experiment[]> {\r\n    return this.http.get<Experiment[]>(this.experimentsUrl)\r\n      .pipe(\r\n        tap(_ => this.log('Read experiments')),\r\n        catchError(this.handleError<Experiment[]>('readExperiments', []))\r\n      );\r\n  }\r\n\r\n  /** GET experiments by id. Return `undefined` when id not found */\r\n  readExperimentNo404<Data>(id: number): Observable<Experiment> {\r\n    const url = `${this.experimentsUrl}/?id=${id}`;\r\n    return this.http.get<Experiment[]>(url)\r\n      .pipe(\r\n        map(experiments => experiments[0]), // returns a {0|1} element array\r\n        tap(h => {\r\n          const outcome = h ? `Read` : `Did not find`;\r\n          this.log(`${outcome} experiment id=${id}`);\r\n        }),\r\n        catchError(this.handleError<Experiment>(`getExperiments id=${id}`))\r\n      );\r\n  }\r\n\r\n  /** GET experiments by id. Will 404 if id not found */\r\n  readExperiment(id: number): Observable<Experiment> {\r\n    const url = `${this.experimentsUrl}/${id}`;\r\n    return this.http.get<Experiment>(url).pipe(\r\n      tap(_ => this.log(`Read experiment id=${id}`)),\r\n      catchError(this.handleError<Experiment>(`getExperiments id=${id}`))\r\n    );\r\n  }\r\n\r\n  /** GET experiments by uuid. Will 404 if id not found */\r\n  readExperimentUUID(experimentId: string): Observable<Experiment> {\r\n    const url = `${this.experimentsUrl}/uuid/${experimentId}`;\r\n    return this.http.get<Experiment>(url).pipe(\r\n      tap(_ => this.log(`Read experiment experimentId=${experimentId}`)),\r\n      catchError(this.handleError<Experiment>(`getExperiments experimentId=${experimentId}`))\r\n    );\r\n  }\r\n\r\n  /* GET experiments whose name contains export term */\r\n  searchExperiments(term: string): Observable<Experiment[]> {\r\n    if (!term.trim()) {\r\n      // if not export term, return empty experiments array.\r\n      return of([]);\r\n    }\r\n    return this.http.get<Experiment[]>(`${this.experimentsUrl}/?name=${term}`).pipe(\r\n      tap(x => x.length ?\r\n        this.log(`Found experiments matching \"${term}\"`) :\r\n        this.log(`No experiments matching \"${term}\"`)),\r\n      catchError(this.handleError<Experiment[]>('searchExperiments', []))\r\n    );\r\n  }\r\n\r\n  //////// Save methods //////////\r\n\r\n  /** POST: add a new experiments to the server */\r\n  createExperiment(experiment: Experiment): Observable<Experiment> {\r\n    return this.http.post<Experiment>(this.experimentsUrl, experiment, this.httpOptions).pipe(\r\n      tap((newExperiment: Experiment) => this.log(`Added experiment with id=${newExperiment.id}`)),\r\n      catchError(this.handleError<Experiment>('createExperiment'))\r\n    );\r\n  }\r\n\r\n  createExperimentMessage(experimentMessage: ExperimentMessage): Observable<void> {\r\n    return this.mqttService.publish('experiment', JSON.stringify(experimentMessage), { qos: 1 }).pipe(\r\n      tap(_ => this.log(`Sent message over bus to create experiment.`)),\r\n      catchError(this.handleError<void>('createExperimentMessage'))\r\n    );\r\n  }\r\n\r\n  /** DELETE: delete the experiments from the server */\r\n  deleteExperiment(experiment: Experiment | number): Observable<Experiment> {\r\n    const id = typeof experiment === 'number' ? experiment : experiment.id;\r\n    const url = `${this.experimentsUrl}/${id}`;\r\n\r\n    return this.http.delete<Experiment>(url, this.httpOptions).pipe(\r\n      tap(_ => this.log(`Deleted experiment id=${id}`)),\r\n      catchError(this.handleError<Experiment>('deleteExperiment'))\r\n    );\r\n  }\r\n\r\n  /** PUT: update the experiments on the server */\r\n  updateExperiment(experiment: Experiment): Observable<any> {\r\n    const id = experiment.id;\r\n    const url = `${this.experimentsUrl}/${id}`;\r\n\r\n    return this.http.put(url, experiment, this.httpOptions).pipe(\r\n      tap(_ => this.log(`Updated experiment id=${experiment.id}`)),\r\n      catchError(this.handleError<any>('updateExperiment'))\r\n    );\r\n  }\r\n\r\n  public generateExperimentMessage(experiment: Experiment, messageType: string, sub_type: string, source: string, version: string): ExperimentMessage {\r\n    const experimentMessage = {\r\n      header: {\r\n        timestamp: experiment.date,\r\n        message_type: messageType,\r\n        version: environment.testbedVersion\r\n      },\r\n      msg: {\r\n        sub_type,\r\n        source,\r\n        experiment_id: experiment.experiment_id,\r\n        timestamp: moment().toDate().toISOString(),\r\n        version\r\n      },\r\n      data: {\r\n        name: experiment.name,\r\n        date: experiment.date,\r\n        author: experiment.author,\r\n        mission: experiment.mission\r\n      }\r\n    };\r\n    return experimentMessage;\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  /** Log an ExperimentService message with the MessageService */\r\n  private log(message: string) {\r\n    this.loggingService.add(`ExperimentService: ${message}`);\r\n  }\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { Trial } from '../trial';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Experiment } from '../../experiment/Experiment';\r\nimport { ExperimentService } from '../../experiment/experiment.service';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { LoggingService } from '../../logging/logging.service';\r\nimport { JsonTrialComponent } from '../json-trial/json-trial.component';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-create-trial',\r\n  templateUrl: './create-trial.component.html',\r\n  styleUrls: ['./create-trial.component.scss']\r\n})\r\nexport class CreateTrialComponent implements OnInit {\r\n  experiments: Experiment[] = [];\r\n  createTrialForm = this.formBuilder.group({\r\n    trial_id: ['', Validators.required],\r\n    name: ['', Validators.required],\r\n    date: ['', Validators.required],\r\n    experimenter: ['', Validators.required],\r\n    subjects: ['', Validators.required],\r\n    trial_number: ['', Validators.required],\r\n    group_number: ['', Validators.required],\r\n    study_number: ['', Validators.required],\r\n    condition: ['', Validators.required],\r\n    notes: [''],\r\n    testbed_version: [environment.testbedVersion, Validators.required],\r\n    experiment: ['', Validators.required],\r\n    useMessageBus: [false]\r\n  });\r\n  uuidPattern: RegExp = new RegExp(/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/);\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private dialogRef: MatDialogRef<CreateTrialComponent>,\r\n    private experimentService: ExperimentService,\r\n    public jsonDialog: MatDialog,\r\n    private loggingService: LoggingService,\r\n    @Inject(MAT_DIALOG_DATA) public data: Trial) {\r\n  }\r\n\r\n  readExperiments(): void {\r\n    this.experimentService.readExperiments()\r\n      .subscribe(experiments => {\r\n        this.experiments = experiments;\r\n      });\r\n  }\r\n\r\n  openJsonTrialDialog(): void {\r\n    const dialogResult = this.createTrialForm.value;\r\n\r\n    const subjectsText = this.createTrialForm.get('subjects').value;\r\n    if (subjectsText !== '') {\r\n      dialogResult.subjects = subjectsText.split(/[\\r\\n]+/);\r\n    } else {\r\n      dialogResult.subjects = [];\r\n    }\r\n\r\n    const notesText = this.createTrialForm.get('notes').value;\r\n    if (notesText !== '') {\r\n      dialogResult.notes = notesText.split(/[\\r\\n]+/);\r\n    } else {\r\n      dialogResult.notes = [];\r\n    }\r\n\r\n    delete dialogResult.useMessageBus;\r\n\r\n    const jsonDialogRef = this.jsonDialog.open(JsonTrialComponent, {\r\n      // width: '250px',\r\n      data: JSON.stringify(dialogResult, null, 2),\r\n      panelClass: 'full-width-2-dialog'\r\n    });\r\n\r\n    jsonDialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        try {\r\n          const trial = JSON.parse(result.json);\r\n          // let experiment = {\r\n          //   name: trial.experiment\r\n          // }\r\n          const experiment = this.experiments.find(e => e.name === trial.experiment);\r\n          this.createTrialForm.patchValue({\r\n            trial_id: trial.trial_id,\r\n            name: trial.name,\r\n            date: trial.date,\r\n            experimenter: trial.experimenter,\r\n            subjects: trial.subjects.length > 0 ? trial.subjects.join('\\r\\n') : trial.subjects,\r\n            trial_number: trial.trial_number,\r\n            group_number: trial.group_number,\r\n            study_number: trial.study_number,\r\n            condition: trial.condition,\r\n            notes: trial.notes.length > 0 ? trial.notes.join('\\r\\n') : trial.notes,\r\n            testbed_version: trial.testbed_version,\r\n            experiment\r\n          });\r\n        } catch (e) {\r\n          this.log(e);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  onCreateClick(): void {\r\n    const dialogResult = this.createTrialForm.value;\r\n\r\n    const subjectsText = this.createTrialForm.get('subjects').value;\r\n    if (subjectsText !== '') {\r\n      dialogResult.subjects = subjectsText.split(/[\\r\\n]+/);\r\n    } else {\r\n      dialogResult.subjects = [];\r\n    }\r\n\r\n    const notesText = this.createTrialForm.get('notes').value;\r\n    if (notesText !== '') {\r\n      dialogResult.notes = notesText.split(/[\\r\\n]+/);\r\n    } else {\r\n      dialogResult.notes = [];\r\n    }\r\n\r\n    this.dialogRef.close(dialogResult);\r\n  }\r\n\r\n  onCancelClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGenerateUUIDClick(): void {\r\n    this.createTrialForm.patchValue({\r\n      trial_id: uuidv4()\r\n    });\r\n  }\r\n\r\n  toggleUseMessageBusChange(event: MatSlideToggleChange) {\r\n    // if (event.checked) {\r\n    //   this.createTrialForm.controls['trial_id'].reset('', {\r\n    //     onlySelf: true\r\n    //   });\r\n    // } else {\r\n    //   this.createTrialForm.controls['trial_id'].reset('', {\r\n    //     onlySelf: true\r\n    //   });\r\n    // }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.readExperiments();\r\n  }\r\n\r\n  compareFnExperiments(e1: Experiment, e2: Experiment): boolean {\r\n    return e1 && e2 ? e1.name === e2.name : e1 === e2;\r\n  }\r\n\r\n  /** Log a TrialService message with the MessageService */\r\n  private log(message: string) {\r\n    this.loggingService.add(`CreateTrialComponent: ${message}`);\r\n  }\r\n\r\n}\r\n","<h1 mat-dialog-title>Create</h1>\r\n<div mat-dialog-content [formGroup]=\"createTrialForm\" layout=\"row\" layout-align=\"center center\">\r\n  <fieldset>\r\n    <legend>Trial</legend>\r\n    <mat-form-field floatLabel=\"always\" appearance=\"none\">\r\n      <div class=\"header-row\">\r\n        <mat-slide-toggle color=\"primary\" (change)=\"toggleUseMessageBusChange($event)\" formControlName=\"useMessageBus\">Use Message Bus</mat-slide-toggle>\r\n        <textarea matInput hidden></textarea>\r\n        <button mat-fab color=\"primary\" (click)=\"openJsonTrialDialog()\" matTooltip=\"Use JSON to populate form.\">\r\n          <mat-icon aria-label=\"Create\">text_snippet</mat-icon>\r\n        </button>\r\n      </div>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial UUID</mat-label>\r\n      <input matInput formControlName=\"trial_id\" placeholder=\"UUID\" [pattern]=\"uuidPattern\" required autocomplete=\"off\" >\r\n      <mat-error>Please use a valid UUID.</mat-error>\r\n      <button mat-icon-button matSuffix (click)=\"onGenerateUUIDClick()\">\r\n        <mat-icon aria-label=\"UUID\">autorenew</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Name</mat-label>\r\n      <input matInput formControlName=\"name\" placeholder=\"Name\" required autocomplete=\"off\">\r\n      <mat-error>Name is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Date</mat-label>\r\n      <input matInput [matDatepicker]=\"date\" formControlName=\"date\" required autocomplete=\"off\">\r\n      <mat-error>Date is required.</mat-error>\r\n      <mat-datepicker-toggle matSuffix [for]=\"date\"></mat-datepicker-toggle>\r\n      <mat-datepicker #date></mat-datepicker>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Experimenter</mat-label>\r\n      <input matInput formControlName=\"experimenter\" placeholder=\"Experimenter\" required autocomplete=\"off\">\r\n      <mat-error>Experimenter is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Subjects</mat-label>\r\n      <textarea matInput formControlName=\"subjects\" placeholder=\"Subjects...\" autocomplete=\"off\"></textarea>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Number</mat-label>\r\n      <input matInput formControlName=\"trial_number\" placeholder=\"Trial Number\" required autocomplete=\"off\">\r\n      <mat-error>Trial Number is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Group Number</mat-label>\r\n      <input matInput formControlName=\"group_number\" placeholder=\"Trial Group Number\" required autocomplete=\"off\">\r\n      <mat-error>Trial Group Number is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Study Number</mat-label>\r\n      <input matInput formControlName=\"study_number\" placeholder=\"Trial Study Number\" required autocomplete=\"off\">\r\n      <mat-error>Trial Study Number is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Condition</mat-label>\r\n      <input matInput formControlName=\"condition\" placeholder=\"Trial Condition\" required autocomplete=\"off\">\r\n      <mat-error>Trial Condition is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Notes</mat-label>\r\n      <textarea matInput formControlName=\"notes\" placeholder=\"Notes...\" autocomplete=\"off\"></textarea>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Testbed Version</mat-label>\r\n      <input matInput formControlName=\"testbed_version\" placeholder=\"Testbed Version\" required autocomplete=\"off\">\r\n      <mat-error>Testbed version is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Experiment</mat-label>\r\n      <mat-select [compareWith]=\"compareFnExperiments\" formControlName=\"experiment\" placeholder=\"Experiment\" required>\r\n        <mat-option *ngFor=\"let experiment of experiments\" [value]=\"experiment\">\r\n          {{experiment.name}}\r\n        </mat-option>\r\n      </mat-select>\r\n      <mat-error>Experiment is required.</mat-error>\r\n    </mat-form-field>\r\n  </fieldset>\r\n</div>\r\n<div mat-dialog-actions align=\"end\">\r\n  <button mat-raised-button color=\"accent\" (click)=\"onCancelClick()\">Cancel</button>\r\n  <button mat-raised-button color=\"primary\" (click)=\"onCreateClick()\" [disabled]=\"!createTrialForm.valid\">Create</button>\r\n</div>\r\n","import { Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { Experiment } from '../../experiment/experiment';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { ExperimentService } from '../../experiment/experiment.service';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Trial } from '../trial';\r\n\r\n@Component({\r\n  selector: 'app-delete-trial',\r\n  templateUrl: './delete-trial.component.html',\r\n  styleUrls: ['./delete-trial.component.scss']\r\n})\r\nexport class DeleteTrialComponent implements OnInit {\r\n  experiments: Experiment[];\r\n  deleteTrialForm = this.formBuilder.group({\r\n    id: ['', Validators.required],\r\n    trial_id: ['', Validators.required],\r\n    name: ['', Validators.required],\r\n    date: ['', Validators.required],\r\n    experimenter: ['', Validators.required],\r\n    subjects: ['', Validators.required],\r\n    trial_number: ['', Validators.required],\r\n    group_number: ['', Validators.required],\r\n    study_number: ['', Validators.required],\r\n    condition: ['', Validators.required],\r\n    notes: [''],\r\n    testbed_version: ['', Validators.required],\r\n    experiment: ['', Validators.required]\r\n  });\r\n  uuidPattern: RegExp = new RegExp(/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/);\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private dialogRef: MatDialogRef<DeleteTrialComponent>,\r\n    private experimentService: ExperimentService,\r\n    @Inject(MAT_DIALOG_DATA) public data: Trial) {\r\n  }\r\n\r\n  readExperiments(): void {\r\n    this.experimentService.readExperiments()\r\n      .subscribe(experiments => {\r\n        this.experiments = experiments;\r\n      });\r\n  }\r\n\r\n  onDeleteClick(): void {\r\n    this.dialogRef.close(this.deleteTrialForm.getRawValue());\r\n  }\r\n\r\n  onCancelClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGenerateUUIDClick(): void {\r\n    this.deleteTrialForm.patchValue({\r\n      trial_id: uuidv4()\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.readExperiments();\r\n\r\n    this.deleteTrialForm.setValue({\r\n      id: this.data.id,\r\n      trial_id: this.data.trial_id,\r\n      name: this.data.name,\r\n      date: this.data.date,\r\n      experimenter: this.data.experimenter,\r\n      subjects: this.data.subjects.length > 0 ? this.data.subjects.join('\\r\\n') : this.data.subjects,\r\n      trial_number: this.data.trial_number,\r\n      group_number: this.data.group_number,\r\n      study_number: this.data.study_number,\r\n      condition: this.data.condition,\r\n      notes: this.data.notes.length > 0 ? this.data.notes.join('\\r\\n') : this.data.notes,\r\n      testbed_version: this.data.testbed_version,\r\n      experiment: this.data.experiment\r\n    });\r\n    this.deleteTrialForm.disable();\r\n  }\r\n\r\n  compareFnExperiments(e1: Experiment, e2: Experiment): boolean {\r\n    return e1 && e2 ? e1.id === e2.id : e1 === e2;\r\n  }\r\n}\r\n","<h1 mat-dialog-title>Delete</h1>\r\n<div mat-dialog-content [formGroup]=\"deleteTrialForm\" layout=\"row\" layout-align=\"center center\">\r\n  <fieldset>\r\n    <legend>Trial: {{data.id}}</legend>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial UUID</mat-label>\r\n      <input matInput formControlName=\"trial_id\" placeholder=\"UUID\" [pattern]=\"uuidPattern\" required autocomplete=\"off\">\r\n      <mat-error>Please use a valid UUID.</mat-error>\r\n      <button mat-icon-button matSuffix (click)=\"onGenerateUUIDClick()\" [disabled]=\"deleteTrialForm.disabled\">\r\n        <mat-icon aria-label=\"UUID\">autorenew</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Name</mat-label>\r\n      <input matInput formControlName=\"name\" placeholder=\"Name\" required autocomplete=\"off\">\r\n      <mat-error>Name is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Date</mat-label>\r\n      <input matInput [matDatepicker]=\"date\" formControlName=\"date\" required autocomplete=\"off\">\r\n      <mat-error>Date is required.</mat-error>\r\n      <mat-datepicker-toggle matSuffix [for]=\"date\"></mat-datepicker-toggle>\r\n      <mat-datepicker #date></mat-datepicker>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Experimenter</mat-label>\r\n      <input matInput formControlName=\"experimenter\" placeholder=\"Experimenter\" required autocomplete=\"off\">\r\n      <mat-error>Experimenter is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Subjects</mat-label>\r\n      <textarea matInput formControlName=\"subjects\" placeholder=\"Subjects...\" autocomplete=\"off\"></textarea>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Number</mat-label>\r\n      <input matInput formControlName=\"trial_number\" placeholder=\"Trial Number\" required autocomplete=\"off\">\r\n      <mat-error>Trial Number is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Group Number</mat-label>\r\n      <input matInput formControlName=\"group_number\" placeholder=\"Trial Group Number\" required autocomplete=\"off\">\r\n      <mat-error>Trial Group Number is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Study Number</mat-label>\r\n      <input matInput formControlName=\"study_number\" placeholder=\"Trial Study Number\" required autocomplete=\"off\">\r\n      <mat-error>Trial Study Number is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Condition</mat-label>\r\n      <input matInput formControlName=\"condition\" placeholder=\"Trial Condition\" required autocomplete=\"off\">\r\n      <mat-error>Trial Condition is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Notes</mat-label>\r\n      <textarea matInput formControlName=\"notes\" placeholder=\"Notes...\" autocomplete=\"off\"></textarea>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Testbed Version</mat-label>\r\n      <input matInput formControlName=\"testbed_version\" placeholder=\"Testbed Version\" required autocomplete=\"off\">\r\n      <mat-error>Testbed version is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Experiment</mat-label>\r\n      <mat-select [compareWith]=\"compareFnExperiments\" formControlName=\"experiment\" placeholder=\"Experiment\" required>\r\n        <mat-option *ngFor=\"let experiment of experiments\" [value]=\"experiment\">\r\n          {{experiment.name}}\r\n        </mat-option>\r\n      </mat-select>\r\n      <mat-error>Experiment is required.</mat-error>\r\n    </mat-form-field>\r\n  </fieldset>\r\n</div>\r\n<div mat-dialog-actions align=\"end\">\r\n  <button mat-raised-button color=\"accent\" (click)=\"onCancelClick()\">Cancel</button>\r\n  <button mat-raised-button color=\"primary\" (click)=\"onDeleteClick()\">Delete</button>\r\n</div>\r\n","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\nimport {FormBuilder, Validators} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-json-trial',\r\n  templateUrl: './json-trial.component.html',\r\n  styleUrls: ['./json-trial.component.scss']\r\n})\r\nexport class JsonTrialComponent implements OnInit {\r\n  jsonTrialForm = this.formBuilder.group({\r\n    json: ['']\r\n  });\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private dialogRef: MatDialogRef<JsonTrialComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: string\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.jsonTrialForm.setValue({\r\n      json: this.data,\r\n    });\r\n  }\r\n\r\n  onParseClick(): void {\r\n    const dialogResult = this.jsonTrialForm.value;\r\n\r\n    this.dialogRef.close(dialogResult);\r\n  }\r\n\r\n  onCancelClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","<h1 mat-dialog-title>Parse</h1>\r\n<div mat-dialog-content [formGroup]=\"jsonTrialForm\" layout=\"row\" layout-align=\"center center\">\r\n  <fieldset>\r\n    <legend>JSON Trial</legend>\r\n    <mat-form-field color=\"accent\" appearance=\"fill\">\r\n      <mat-label>JSON</mat-label>\r\n      <textarea matInput\r\n                cdkTextareaAutosize\r\n                #autosize=\"cdkTextareaAutosize\"\r\n                cdkAutosizeMinRows=\"20\"\r\n                cdkAutosizeMaxRows=\"20\" md-detect-hidden formControlName=\"json\" placeholder=\"{ }\" autocomplete=\"off\"></textarea>\r\n    </mat-form-field>\r\n  </fieldset>\r\n</div>\r\n<div mat-dialog-actions align=\"end\">\r\n  <button mat-raised-button color=\"accent\" (click)=\"onCancelClick()\">Cancel</button>\r\n  <button mat-raised-button color=\"primary\" (click)=\"onParseClick()\" [disabled]=\"!jsonTrialForm.valid\">Parse</button>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TrialsComponent } from './trials/trials.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: TrialsComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class TrialRoutingModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TrialRoutingModule } from './trial-routing.module';\r\nimport { TrialsComponent } from './trials/trials.component';\r\nimport { AngularMaterialModule } from '../angular-material/angular-material-module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CreateTrialComponent } from './create-trial/create-trial.component';\r\nimport { UpdateTrialComponent } from './update-trial/update-trial.component';\r\nimport { DeleteTrialComponent } from './delete-trial/delete-trial.component';\r\nimport { JsonTrialComponent } from './json-trial/json-trial.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [TrialsComponent, CreateTrialComponent, UpdateTrialComponent, DeleteTrialComponent, JsonTrialComponent],\r\n  imports: [\r\n    CommonModule,\r\n    TrialRoutingModule,\r\n    AngularMaterialModule,\r\n    ReactiveFormsModule\r\n  ]\r\n})\r\nexport class TrialModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Trial } from '../trial/trial';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport { TrialMessage } from '../trial/trial-message';\r\nimport { TrialExportMessage } from '../trial/trial-export-message';\r\nimport { MqttService } from 'ngx-mqtt';\r\n// import moment from 'moment';\r\n\r\nconst moment = require('moment');\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TrialService {\r\n  private trialsUrl = environment.metadataAppUrl + '/trials';  // URL to web api\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private loggingService: LoggingService,\r\n    private mqttService: MqttService\r\n  ) { }\r\n\r\n  /** GET trials from the server */\r\n  readTrials(): Observable<Trial[]> {\r\n    return this.http.get<Trial[]>(this.trialsUrl)\r\n      .pipe(\r\n        tap(_ => this.log('Read trials')),\r\n        catchError(this.handleError<Trial[]>('readTrials', []))\r\n      );\r\n  }\r\n\r\n  /** GET trials by id. Return `undefined` when id not found */\r\n  readTrialNo404<Data>(id: number): Observable<Trial> {\r\n    const url = `${this.trialsUrl}/?id=${id}`;\r\n    return this.http.get<Trial[]>(url)\r\n      .pipe(\r\n        map(trials => trials[0]), // returns a {0|1} element array\r\n        tap(h => {\r\n          const outcome = h ? `Read` : `Did not find`;\r\n          this.log(`${outcome} trial id=${id}`);\r\n        }),\r\n        catchError(this.handleError<Trial>(`getTrials id=${id}`))\r\n      );\r\n  }\r\n\r\n  /** GET trials by uuid. Return `undefined` when id not found */\r\n  readTrialUUID(uuid: string): Observable<Trial> {\r\n    const url = `${this.trialsUrl}/uuid/${uuid}`;\r\n    return this.http.get<Trial>(url).pipe(\r\n      tap(_ => this.log(`Read trial id=${uuid}`)),\r\n      catchError(this.handleError<Trial>(`getTrials uuid=${uuid}`))\r\n    );\r\n  }\r\n\r\n  /** GET trials by id. Will 404 if id not found */\r\n  readTrial(id: number): Observable<Trial> {\r\n    const url = `${this.trialsUrl}/${id}`;\r\n    return this.http.get<Trial>(url).pipe(\r\n      tap(_ => this.log(`Read trial id=${id}`)),\r\n      catchError(this.handleError<Trial>(`getTrials id=${id}`))\r\n    );\r\n  }\r\n\r\n  /* GET trials whose name contains export term */\r\n  searchTrials(term: string): Observable<Trial[]> {\r\n    if (!term.trim()) {\r\n      // if not export term, return empty trials array.\r\n      return of([]);\r\n    }\r\n    return this.http.get<Trial[]>(`${this.trialsUrl}/?name=${term}`).pipe(\r\n      tap(x => x.length ?\r\n        this.log(`Found trials matching \"${term}\"`) :\r\n        this.log(`No trials matching \"${term}\"`)),\r\n      catchError(this.handleError<Trial[]>('searchTrials', []))\r\n    );\r\n  }\r\n\r\n  /* GET the existence of the replay in elasticsearch */\r\n  getExistReplay(uuid: string, index: string): Observable<any> {\r\n    const url = `${this.trialsUrl}/${uuid}/exist?index=${index}`;\r\n    return this.http.get<boolean>(url).pipe(\r\n      tap(exist => this.log(`Trial ${uuid} ${exist ? 'exists' : 'does not exist'} in elasticsearch index ${index}`)),\r\n      catchError(this.handleError<boolean>(`Trial ${uuid} exist in elasticsearch index ${index}`))\r\n    );\r\n  }\r\n\r\n  //////// Save methods //////////\r\n\r\n  /** POST: add a new trials to the server */\r\n  createTrial(trial: Trial): Observable<Trial> {\r\n    return this.http.post<Trial>(this.trialsUrl, trial, this.httpOptions).pipe(\r\n      tap((newTrial: Trial) => this.log(`added trial with id=${newTrial.id}`)),\r\n      catchError(this.handleError<Trial>('createTrial'))\r\n    );\r\n  }\r\n\r\n  createTrialMessage(trialMessage: TrialMessage): Observable<void> {\r\n    return this.mqttService.publish('trial', JSON.stringify(trialMessage), { qos: 1 }).pipe(\r\n      tap(_ => this.log(`Sent message over bus to create trial.`)),\r\n      catchError(this.handleError<void>('createTrialMessage'))\r\n    );\r\n  }\r\n\r\n  /** DELETE: delete the trials from the server */\r\n  deleteTrial(trial: Trial | number): Observable<Trial> {\r\n    const id = typeof trial === 'number' ? trial : trial.id;\r\n    const url = `${this.trialsUrl}/${id}`;\r\n\r\n    return this.http.delete<Trial>(url, this.httpOptions).pipe(\r\n      tap(_ => this.log(`Deleted trial id=${id}`)),\r\n      catchError(this.handleError<Trial>('deleteTrial'))\r\n    );\r\n  }\r\n\r\n  /** PUT: update the trials on the server */\r\n  updateTrial(trial: Trial): Observable<any> {\r\n    const id = trial.id;\r\n    const url = `${this.trialsUrl}/${id}`;\r\n\r\n    return this.http.put(url, trial, this.httpOptions).pipe(\r\n      tap(_ => this.log(`Updated trial id=${trial.id}`)),\r\n      catchError(this.handleError<any>('updateTrial'))\r\n    );\r\n  }\r\n\r\n  public generateTrialMessage(trial: Trial, sub_type: string, source: string, version: string, replay_id: string, replay_parent_id: string, replay_parent_type: string): TrialMessage {\r\n    const trialMessage = {\r\n      header: {\r\n        timestamp: trial.date,\r\n        message_type: 'trial',\r\n        version: environment.testbedVersion\r\n      },\r\n      msg: {\r\n        sub_type,\r\n        source,\r\n        experiment_id: trial.experiment.experiment_id,\r\n        trial_id: trial.trial_id,\r\n        timestamp: moment().toDate().toISOString(),\r\n        version,\r\n        replay_id,\r\n        replay_parent_id,\r\n        replay_parent_type\r\n      },\r\n      data: {\r\n        name: trial.name,\r\n        date: trial.date,\r\n        experimenter: trial.experimenter,\r\n        subjects: trial.subjects,\r\n        trial_number: trial.trial_number,\r\n        group_number: trial.group_number,\r\n        study_number: trial.study_number,\r\n        condition: trial.condition,\r\n        notes: trial.notes,\r\n        testbed_version: trial.testbed_version,\r\n        experiment_name: trial.experiment.name,\r\n        experiment_date: trial.experiment.date,\r\n        experiment_author: trial.experiment.author,\r\n        experiment_mission: trial.experiment.mission\r\n      }\r\n    };\r\n    if (replay_id === null) {\r\n      delete trialMessage.msg.replay_id;\r\n    }\r\n    if (replay_parent_id === null) {\r\n      delete trialMessage.msg.replay_parent_id;\r\n    }\r\n    if (replay_parent_type === null) {\r\n      delete trialMessage.msg.replay_parent_type;\r\n    }\r\n    return trialMessage;\r\n  }\r\n\r\n  public generateExportMessage(trial: Trial, index: string, sub_type: string, source: string, version: string, replay_id: string, replay_parent_id: string, replay_parent_type: string): TrialExportMessage {\r\n    if (trial === null) {\r\n      return null;\r\n    }\r\n    const trialExportMessage = {\r\n      header: {\r\n        timestamp: moment().toDate().toISOString(),\r\n        message_type: 'export',\r\n        version: index\r\n      },\r\n      msg: {\r\n        sub_type,\r\n        source,\r\n        experiment_id: trial.experiment.experiment_id,\r\n        trial_id: trial.trial_id,\r\n        timestamp: moment().toDate().toISOString(),\r\n        version,\r\n        replay_id,\r\n        replay_parent_id,\r\n        replay_parent_type\r\n      },\r\n      data: {\r\n        index,\r\n        metadata: {\r\n          trial: {\r\n            name: trial.name,\r\n            date: trial.date,\r\n            experimenter: trial.experimenter,\r\n            subjects: trial.subjects,\r\n            trial_number: trial.trial_number,\r\n            group_number: trial.group_number,\r\n            study_number: trial.study_number,\r\n            condition: trial.condition,\r\n            notes: trial.notes,\r\n            testbed_version: trial.testbed_version,\r\n            experiment_name: trial.experiment.name,\r\n            experiment_date: trial.experiment.date,\r\n            experiment_author: trial.experiment.author,\r\n            experiment_mission: trial.experiment.mission\r\n          }\r\n        }\r\n      }\r\n    };\r\n    if (replay_id === null) {\r\n      delete trialExportMessage.msg.replay_id;\r\n    }\r\n    if (replay_parent_id === null) {\r\n      delete trialExportMessage.msg.replay_parent_id;\r\n    }\r\n    if (replay_parent_type === null) {\r\n      delete trialExportMessage.msg.replay_parent_type;\r\n    }\r\n    return trialExportMessage;\r\n  }\r\n\r\n  public sendExportMessage(trialExportMessage: TrialExportMessage) {\r\n    if (trialExportMessage !== null) {\r\n      return this.mqttService.publish('metadata/trial/export', JSON.stringify(trialExportMessage), {qos: 1}).pipe(\r\n        tap(_ => {\r\n          this.log(`Exported trial using message bus.`);\r\n        }),\r\n        catchError(this.handleError<void>('trialExportMessage'))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  /** Log a TrialService message with the MessageService */\r\n  private log(message: string) {\r\n    this.loggingService.add(`TrialService: ${message}`);\r\n  }\r\n}\r\n","import {Component, OnInit, OnDestroy, ViewChild} from '@angular/core';\r\n\r\nimport { Trial } from '../trial';\r\nimport { TrialMessage } from '../trial-message';\r\nimport { TrialService } from '../trial.service';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { Subscription } from 'rxjs';\r\nimport { MediaObserver, MediaChange } from '@angular/flex-layout';\r\nimport { CreateTrialComponent } from '../create-trial/create-trial.component';\r\nimport { UpdateTrialComponent } from '../update-trial/update-trial.component';\r\nimport { DeleteTrialComponent } from '../delete-trial/delete-trial.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { LoggingService } from '../../logging/logging.service';\r\nimport { Experiment } from '../../experiment/experiment';\r\nimport { environment } from '../../../environments/environment';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { ProgressSpinnerComponent } from '../../progress-spinner/progress-spinner.component';\r\nimport { ExperimentMessage } from '../../experiment/experiment-message';\r\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { IMqttMessage, MqttService } from 'ngx-mqtt';\r\n\r\n@Component({\r\n  selector: 'app-trials',\r\n  templateUrl: './trials.component.html',\r\n  styleUrls: ['./trials.component.scss']\r\n})\r\nexport class TrialsComponent implements OnInit, OnDestroy {\r\n  trials: Trial[];\r\n  displayedColumns: string[];\r\n  dataSource = new MatTableDataSource(this.trials);\r\n  overlayRef: OverlayRef;\r\n  private trialCreatedSubscription: Subscription;\r\n\r\n  currentScreenWidth = '';\r\n  flexMediaWatcher: Subscription;\r\n\r\n  @ViewChild(MatTable) table: MatTable<Trial>;\r\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n  constructor(\r\n    private trialService: TrialService,\r\n    private mediaObserver: MediaObserver,\r\n    public createDialog: MatDialog,\r\n    public updateDialog: MatDialog,\r\n    public deleteDialog: MatDialog,\r\n    private loggingService: LoggingService,\r\n    private overlay: Overlay,\r\n    private mqttService: MqttService\r\n  ) {\r\n\r\n    this.trialCreatedSubscription = this.mqttService.observe('metadata/trial/created').subscribe((message: IMqttMessage) => {\r\n      const json = new TextDecoder('utf-8').decode(message.payload);\r\n      // let trial = <Trial>JSON.parse(json);\r\n      this.log('Trial created: ' + json);\r\n      this.read();\r\n    });\r\n\r\n    // this.flexMediaWatcher = mediaObserver.media$.subscribe((change: MediaChange) => {\r\n    //   if (change.mqAlias !== this.currentScreenWidth) {\r\n    //     this.currentScreenWidth = change.mqAlias;\r\n    //     this.setupTable();\r\n    //   }\r\n    // });\r\n\r\n    this.overlayRef = this.overlay.create({\r\n      positionStrategy: this.overlay.position().global().centerHorizontally().centerVertically(),\r\n      hasBackdrop: true\r\n    });\r\n\r\n    this.flexMediaWatcher = mediaObserver.asObservable()\r\n      .pipe(\r\n        filter((changes: MediaChange[]) => changes.length > 0),\r\n        map((changes: MediaChange[]) => changes[0])\r\n      ).subscribe((change: MediaChange) => {\r\n        if (change.mqAlias !== this.currentScreenWidth) {\r\n          this.currentScreenWidth = change.mqAlias;\r\n          this.setupTable();\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.read();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.flexMediaWatcher.unsubscribe();\r\n    this.trialCreatedSubscription.unsubscribe();\r\n  }\r\n\r\n  setupTable() {\r\n    this.displayedColumns = ['id', 'trial_id', 'name', 'date', 'experimenter', 'subjects', 'trial_number', 'group_number', 'study_number', 'condition', 'notes', 'testbed_version', 'experiment_id_experiments', 'actions'];\r\n    if (this.currentScreenWidth === 'xs') {\r\n      this.displayedColumns = ['name', 'experiment_id_experiments', 'actions'];\r\n    }\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  showOverlay() {\r\n    this.overlayRef.attach(new ComponentPortal(ProgressSpinnerComponent));\r\n    setTimeout(() => {\r\n      this.overlayRef.detach();\r\n      this.read();\r\n    }, 3000);\r\n  }\r\n\r\n  create(trial: Trial): void {\r\n    if (!trial) { return; }\r\n    this.trialService.createTrial(trial)\r\n      .subscribe(t => {\r\n        if (t) {\r\n          this.log(`Trial has been created: ${t.id}`);\r\n          this.trials.push(t);\r\n\r\n          this.dataSource.data = this.trials;\r\n          this.dataSource.sort = this.sort;\r\n          this.dataSource.paginator = this.paginator;\r\n        }\r\n      });\r\n    this.table.renderRows();\r\n  }\r\n\r\n  createMessage(trial: TrialMessage): void {\r\n    if (!trial) { return; }\r\n    this.trialService.createTrialMessage(trial)\r\n      .subscribe(_ => {\r\n        // this.log(`Trial message has been created using message bus.`);\r\n        // this.showOverlay();\r\n      });\r\n    // this.table.renderRows();\r\n  }\r\n\r\n  read(): void {\r\n    this.trialService.readTrials()\r\n      .subscribe(trials => {\r\n        this.trials = trials;\r\n        this.dataSource = new MatTableDataSource(this.trials);\r\n        this.dataSource.sort = this.sort;\r\n        this.dataSource.paginator = this.paginator;\r\n      });\r\n  }\r\n\r\n  update(index: number, trial: Trial): void {\r\n    if (!trial) { return; }\r\n    if (!trial.id) { return; }\r\n    this.trialService.updateTrial(trial)\r\n      .subscribe(t => {\r\n        if (t) {\r\n          this.log(`Trial has been updated: ${t.id}`);\r\n          this.trials[index] = t;\r\n\r\n          this.dataSource.data = this.trials;\r\n          this.dataSource.sort = this.sort;\r\n          this.dataSource.paginator = this.paginator;\r\n        }\r\n      });\r\n    this.table.renderRows();\r\n  }\r\n\r\n  delete(index: number,  trial: Trial): void {\r\n    if (!trial) { return; }\r\n    this.trialService.deleteTrial(trial.id)\r\n      .subscribe(success => {\r\n        if (success) {\r\n          this.log(`Trial has been deleted: ${trial.id}`);\r\n          this.dataSource.data.splice(index, 1);\r\n\r\n          this.dataSource.data = this.trials;\r\n          this.dataSource.sort = this.sort;\r\n          this.dataSource.paginator = this.paginator;\r\n        }\r\n      });\r\n    this.table.renderRows();\r\n  }\r\n\r\n  openCreateTrialDialog(): void {\r\n    // const dialogRef = this.createDialog.open(CreateTrialComponent, {\r\n    //   // width: '250px',\r\n    //   // data: {name: this.name, animal: this.animal}\r\n    // });\r\n    //\r\n    // dialogRef.afterClosed().subscribe(result => {\r\n    //   this.create(result);\r\n    // });\r\n    const dialogRef = this.createDialog.open(CreateTrialComponent, {\r\n      // width: '250px',\r\n      // data: {name: this.name, animal: this.animal}\r\n      panelClass: 'full-width-1-dialog'\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (!result) {\r\n        return;\r\n      }\r\n      if (result.useMessageBus) {\r\n        const trialMessage = this.trialService.generateTrialMessage(result, 'create', 'metadata-web', environment.testbedVersion, null, null, null);\r\n        this.createMessage(trialMessage);\r\n      } else {\r\n        const trial = {\r\n          id: -1,\r\n          trial_id: result.trial_id,\r\n          name: result.name,\r\n          date: result.date,\r\n          experimenter: result.experimenter,\r\n          subjects: result.subjects,\r\n          trial_number: result.trial_number,\r\n          group_number: result.group_number,\r\n          study_number: result.study_number,\r\n          condition: result.condition,\r\n          notes: result.notes,\r\n          testbed_version: result.testbed_version,\r\n          experiment: result.experiment\r\n        };\r\n        this.create(trial);\r\n      }\r\n    });\r\n  }\r\n\r\n  openUpdateTrialDialog(index: number, id: number, trial_id: string, name: string, date: string, experimenter: string, subjects: string[], trial_number: string, group_number: string, study_number: string, condition: string, notes: string[], testbed_version: string, experiment: Experiment) {\r\n    const dialogRef = this.updateDialog.open(UpdateTrialComponent, {\r\n      data: {\r\n        id,\r\n        trial_id,\r\n        name,\r\n        date,\r\n        experimenter,\r\n        subjects,\r\n        trial_number,\r\n        group_number,\r\n        study_number,\r\n        condition,\r\n        notes,\r\n        testbed_version,\r\n        experiment\r\n      }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (!result) { return; }\r\n      this.update(index, result);\r\n    });\r\n  }\r\n\r\n  openDeleteTrialDialog(index: number, id: number, trial_id: string, name: string, date: string, experimenter: string, subjects: string[], trial_number: string, group_number: string, study_number: string, condition: string, notes: string[], testbed_version: string, experiment: Experiment) {\r\n    const dialogRef = this.deleteDialog.open(DeleteTrialComponent, {\r\n      data: {\r\n        id,\r\n        trial_id,\r\n        name,\r\n        date,\r\n        experimenter,\r\n        trial_number,\r\n        group_number,\r\n        study_number,\r\n        condition,\r\n        subjects,\r\n        notes,\r\n        testbed_version,\r\n        experiment }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      this.delete(index, result);\r\n    });\r\n  }\r\n\r\n  private log(message: string) {\r\n    this.loggingService.add(`TrialComponent: ${message}`);\r\n  }\r\n}\r\n","<div class=\"container\">\r\n\r\n  <h2>Trials</h2>\r\n\r\n  <div fxLayout=\"column\">\r\n\r\n    <mat-form-field>\r\n      <mat-label>Filter Table</mat-label>\r\n      <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Filter\" autocomplete=\"off\">\r\n    </mat-form-field>\r\n\r\n    <div class=\"table-container\">\r\n      <table mat-table [dataSource]=\"dataSource\" matSort class=\"mat-elevation-z8\">\r\n\r\n        <!-- ID Column -->\r\n        <ng-container matColumnDef=\"id\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\r\n          <td mat-cell *matCellDef=\"let trial\"> {{trial.id}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Trial ID Column -->\r\n        <ng-container matColumnDef=\"trial_id\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Trial ID </th>\r\n          <td mat-cell *matCellDef=\"let trial\"> {{trial.trial_id}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Name Column -->\r\n        <ng-container matColumnDef=\"name\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\r\n          <td mat-cell *matCellDef=\"let trial\"> {{trial.name}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Date Column -->\r\n        <ng-container matColumnDef=\"date\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Date </th>\r\n          <td mat-cell *matCellDef=\"let trial\"> {{trial.date}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Experimenter Column -->\r\n        <ng-container matColumnDef=\"experimenter\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Experimenter </th>\r\n          <td mat-cell *matCellDef=\"let trial\"> {{trial.experimenter}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Subjects Column -->\r\n        <ng-container matColumnDef=\"subjects\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Subjects </th>\r\n          <td mat-cell *matCellDef=\"let trial\"> {{trial.subjects}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Trial Number Column -->\r\n        <ng-container matColumnDef=\"trial_number\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Trial Number </th>\r\n          <td mat-cell *matCellDef=\"let trial\"> {{trial.trial_number}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Group Number Column -->\r\n        <ng-container matColumnDef=\"group_number\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Group Number </th>\r\n          <td mat-cell *matCellDef=\"let trial\"> {{trial.group_number}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Study Number Column -->\r\n        <ng-container matColumnDef=\"study_number\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Study Number </th>\r\n          <td mat-cell *matCellDef=\"let trial\"> {{trial.study_number}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Condition Column -->\r\n        <ng-container matColumnDef=\"condition\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Condition </th>\r\n          <td mat-cell *matCellDef=\"let trial\"> {{trial.condition}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Notes Column -->\r\n        <ng-container matColumnDef=\"notes\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Notes </th>\r\n          <td mat-cell *matCellDef=\"let trial\"> {{trial.notes}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Testbed Column -->\r\n        <ng-container matColumnDef=\"testbed_version\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Testbed Version </th>\r\n          <td mat-cell *matCellDef=\"let trial\"> {{trial.testbed_version}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Experiment ID -->\r\n        <ng-container matColumnDef=\"experiment_id_experiments\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Experiment ID </th>\r\n          <td mat-cell *matCellDef=\"let trial\"> {{trial.experiment !== null ? trial.experiment.experiment_id : 'NULL'}} </td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"actions\">\r\n          <th mat-header-cell class=\"create-button\" *matHeaderCellDef>\r\n            <button mat-icon-button (click)=\"openCreateTrialDialog()\">\r\n              <mat-icon aria-label=\"Create\">add_circle</mat-icon>\r\n            </button>\r\n          </th>\r\n\r\n          <td mat-cell *matCellDef=\"let row; let i = index;\">\r\n            <div class=\"mat-cell-buttons\">\r\n              <button mat-icon-button color=\"accent\" (click)=\"openUpdateTrialDialog(this.paginator.pageIndex == 0 ?  i : i + this.paginator.pageIndex * this.paginator.pageSize, row.id, row.trial_id, row.name, row.date, row.experimenter, row.subjects, row.trial_number, row.group_number, row.study_number, row.condition, row.notes, row.testbed_version, row.experiment)\">\r\n                <mat-icon aria-label=\"Edit\">edit</mat-icon>\r\n              </button>\r\n\r\n              <button mat-icon-button color=\"accent\" (click)=\"openDeleteTrialDialog(this.paginator.pageIndex == 0 ?  i : i + this.paginator.pageIndex * this.paginator.pageSize, row.id, row.trial_id, row.name, row.date, row.experimenter, row.subjects, row.trial_number, row.group_number, row.study_number, row.condition, row.notes, row.testbed_version, row.experiment)\">\r\n                <mat-icon aria-label=\"Delete\">delete</mat-icon>\r\n              </button>\r\n            </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n      </table>\r\n      <div class=\"no-results\" [style.display]=\"dataSource.data.length == 0 ? '' : 'none'\">\r\n        No results\r\n      </div>\r\n      <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { Experiment } from '../../experiment/experiment';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { ExperimentService } from '../../experiment/experiment.service';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Trial } from '../trial';\r\n\r\n@Component({\r\n  selector: 'app-update-trial',\r\n  templateUrl: './update-trial.component.html',\r\n  styleUrls: ['./update-trial.component.scss']\r\n})\r\nexport class UpdateTrialComponent implements OnInit {\r\n  experiments: Experiment[];\r\n  updateTrialForm = this.formBuilder.group({\r\n    id: ['', Validators.required],\r\n    trial_id: ['', Validators.required],\r\n    name: ['', Validators.required],\r\n    date: ['', Validators.required],\r\n    experimenter: ['', Validators.required],\r\n    subjects: ['', Validators.required],\r\n    trial_number: ['', Validators.required],\r\n    group_number: ['', Validators.required],\r\n    study_number: ['', Validators.required],\r\n    condition: ['', Validators.required],\r\n    notes: [''],\r\n    testbed_version: ['', Validators.required],\r\n    experiment: ['', Validators.required]\r\n  });\r\n  uuidPattern: RegExp = new RegExp(/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/);\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private dialogRef: MatDialogRef<UpdateTrialComponent>,\r\n    private experimentService: ExperimentService,\r\n    @Inject(MAT_DIALOG_DATA) public data: Trial) {\r\n  }\r\n\r\n  readExperiments(): void {\r\n    this.experimentService.readExperiments()\r\n      .subscribe(experiments => {\r\n        this.experiments = experiments;\r\n      });\r\n  }\r\n\r\n  onUpdateClick(): void {\r\n    const dialogResult = this.updateTrialForm.value;\r\n\r\n    const subjectsText = this.updateTrialForm.get('subjects').value;\r\n    if (subjectsText !== '') {\r\n      dialogResult.subjects = subjectsText.split(/[\\r\\n]+/);\r\n    } else {\r\n      dialogResult.subjects = [];\r\n    }\r\n\r\n    const notesText = this.updateTrialForm.get('notes').value;\r\n    if (notesText !== '') {\r\n      dialogResult.notes = notesText.split(/[\\r\\n]+/);\r\n    } else {\r\n      dialogResult.notes = [];\r\n    }\r\n\r\n    this.dialogRef.close(dialogResult);\r\n  }\r\n\r\n  onCancelClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGenerateUUIDClick(): void {\r\n    this.updateTrialForm.patchValue({\r\n      trial_id: uuidv4()\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.readExperiments();\r\n\r\n    this.updateTrialForm.setValue({\r\n      id: this.data.id,\r\n      trial_id: this.data.trial_id,\r\n      name: this.data.name,\r\n      date: this.data.date,\r\n      experimenter: this.data.experimenter,\r\n      subjects: this.data.subjects.length > 0 ? this.data.subjects.join('\\r\\n') : this.data.subjects,\r\n      trial_number: this.data.trial_number,\r\n      group_number: this.data.group_number,\r\n      study_number: this.data.study_number,\r\n      condition: this.data.condition,\r\n      notes: this.data.notes.length > 0 ? this.data.notes.join('\\r\\n') : this.data.notes,\r\n      testbed_version: this.data.testbed_version,\r\n      experiment: this.data.experiment\r\n    });\r\n  }\r\n\r\n  compareFnExperiments(e1: Experiment, e2: Experiment): boolean {\r\n    return e1 && e2 ? e1.id === e2.id : e1 === e2;\r\n  }\r\n}\r\n","<h1 mat-dialog-title>Update</h1>\r\n<div mat-dialog-content [formGroup]=\"updateTrialForm\" layout=\"row\" layout-align=\"center center\">\r\n  <fieldset>\r\n    <legend>Trial: {{data.id}}</legend>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial UUID</mat-label>\r\n      <input matInput formControlName=\"trial_id\" placeholder=\"UUID\" [pattern]=\"uuidPattern\" required autocomplete=\"off\" >\r\n      <mat-error>Please use a valid UUID.</mat-error>\r\n      <button mat-icon-button matSuffix (click)=\"onGenerateUUIDClick()\">\r\n        <mat-icon aria-label=\"UUID\">autorenew</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Name</mat-label>\r\n      <input matInput formControlName=\"name\" placeholder=\"Name\" required autocomplete=\"off\">\r\n      <mat-error>Name is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Date</mat-label>\r\n      <input matInput [matDatepicker]=\"date\" formControlName=\"date\" required autocomplete=\"off\">\r\n      <mat-error>Date is required.</mat-error>\r\n      <mat-datepicker-toggle matSuffix [for]=\"date\"></mat-datepicker-toggle>\r\n      <mat-datepicker #date></mat-datepicker>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Experimenter</mat-label>\r\n      <input matInput formControlName=\"experimenter\" placeholder=\"Experimenter\" required autocomplete=\"off\">\r\n      <mat-error>Experimenter is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Subjects</mat-label>\r\n      <textarea matInput formControlName=\"subjects\" placeholder=\"Subjects...\" autocomplete=\"off\"></textarea>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Number</mat-label>\r\n      <input matInput formControlName=\"trial_number\" placeholder=\"Trial Number\" required autocomplete=\"off\">\r\n      <mat-error>Trial Number is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Group Number</mat-label>\r\n      <input matInput formControlName=\"group_number\" placeholder=\"Trial Group Number\" required autocomplete=\"off\">\r\n      <mat-error>Trial Group Number is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Study Number</mat-label>\r\n      <input matInput formControlName=\"study_number\" placeholder=\"Trial Study Number\" required autocomplete=\"off\">\r\n      <mat-error>Trial Study Number is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Condition</mat-label>\r\n      <input matInput formControlName=\"condition\" placeholder=\"Trial Condition\" required autocomplete=\"off\">\r\n      <mat-error>Trial Condition is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Notes</mat-label>\r\n      <textarea matInput formControlName=\"notes\" placeholder=\"Notes...\" autocomplete=\"off\"></textarea>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Testbed Version</mat-label>\r\n      <input matInput formControlName=\"testbed_version\" placeholder=\"Testbed Version\" required autocomplete=\"off\">\r\n      <mat-error>Testbed version is required.</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Trial Experiment</mat-label>\r\n      <mat-select [compareWith]=\"compareFnExperiments\" formControlName=\"experiment\" placeholder=\"Experiment\" required>\r\n        <mat-option *ngFor=\"let experiment of experiments\" [value]=\"experiment\">\r\n          {{experiment.name}}\r\n        </mat-option>\r\n      </mat-select>\r\n      <mat-error>Experiment is required.</mat-error>\r\n    </mat-form-field>\r\n  </fieldset>\r\n</div>\r\n<div mat-dialog-actions align=\"end\">\r\n  <button mat-raised-button color=\"accent\" (click)=\"onCancelClick()\">Cancel</button>\r\n  <button mat-raised-button color=\"primary\" (click)=\"onUpdateClick()\" [disabled]=\"!updateTrialForm.valid\">Update</button>\r\n</div>\r\n"]}