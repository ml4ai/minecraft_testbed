{"version":3,"sources":["webpack:///src/app/replay/replay.service.ts","webpack:///src/app/trial/trial.service.ts"],"names":["moment","ReplayService","http","loggingService","mqttService","replaysUrl","metadataAppUrl","_isReplayCreated","isReplayCreated","asObservable","httpOptions","headers","get","pipe","_","log","handleError","id","url","replays","h","outcome","term","trim","x","length","uuid","index","exist","replay","post","newReplay","replayMessage","publish","JSON","stringify","qos","put","message","next","ignore_message_list","ignore_source_list","ignore_topic_list","body","messageApiResult","result","replay_objects","restart","trial_id","experiment_id","replay_parent_id","replay_parent_type","sub_type","source","version","header","timestamp","toDate","toISOString","message_type","testbedVersion","msg","replay_id","data","parents","root","experiment","metadata","replayExportMessage","operation","error","console","add","providedIn","TrialService","trialsUrl","trials","trial","newTrial","trialMessage","date","name","experimenter","subjects","trial_number","group_number","study_number","condition","notes","testbed_version","experiment_name","experiment_date","experiment_author","author","experiment_mission","mission","trialExportMessage"],"mappings":"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","file":"default~dashboard-dashboard-module~docker-docker-module~replay-replay-module~stats-stats-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { environment } from '../../environments/environment';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { MqttService } from 'ngx-mqtt';\r\nimport {BehaviorSubject, Observable, of} from 'rxjs';\r\nimport { Replay } from './replay';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { ReplayMessage } from './replay-message';\r\nimport { ReplayExportMessage } from './replay-export-message';\r\nimport { Trial } from '../trial/trial';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {MessageApiResult} from '../dashboard/run-replay/MessageApiResult';\r\nimport {IgnoreListItem} from './ignore-list-item';\r\nimport {ReplayObject} from '../dashboard/batch-run-replay/replayObject';\r\n// import moment from 'moment';\r\n\r\nconst moment = require('moment');\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReplayService {\r\n  private replaysUrl = environment.metadataAppUrl + '/replays';  // URL to web api\r\n\r\n  private _isReplayCreated: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n  public isReplayCreated = this._isReplayCreated.asObservable();\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private loggingService: LoggingService,\r\n    private mqttService: MqttService\r\n  ) { }\r\n\r\n  /** GET replay from the server */\r\n  readReplays(): Observable<Replay[]> {\r\n    return this.http.get<Replay[]>(this.replaysUrl)\r\n      .pipe(\r\n        tap(_ => {\r\n          this.log('Read replays');\r\n        }),\r\n        catchError(this.handleError<Replay[]>('readReplays', []))\r\n      );\r\n  }\r\n\r\n  /** GET replays by id. Return `undefined` when id not found */\r\n  readReplayNo404<Data>(id: number): Observable<Replay> {\r\n    const url = `${this.replaysUrl}/?id=${id}`;\r\n    return this.http.get<Replay[]>(url)\r\n      .pipe(\r\n        map(replays => replays[0]), // returns a {0|1} element array\r\n        tap(h => {\r\n          const outcome = h ? `Read` : `Did not find`;\r\n          this.log(`${outcome} replay id=${id}`);\r\n        }),\r\n        catchError(this.handleError<Replay>(`getReplays id=${id}`))\r\n      );\r\n  }\r\n\r\n  /** GET replays by id. Will 404 if id not found */\r\n  readReplay(id: number): Observable<Replay> {\r\n    const url = `${this.replaysUrl}/${id}`;\r\n    return this.http.get<Replay>(url).pipe(\r\n      tap(_ => this.log(`Read replay id=${id}`)),\r\n      catchError(this.handleError<Replay>(`getReplays id=${id}`))\r\n    );\r\n  }\r\n\r\n  /* GET replays whose name contains export term */\r\n  searchReplays(term: string): Observable<Replay[]> {\r\n    if (!term.trim()) {\r\n      // if not export term, return empty replays array.\r\n      return of([]);\r\n    }\r\n    return this.http.get<Replay[]>(`${this.replaysUrl}/?name=${term}`).pipe(\r\n      tap(x => x.length ?\r\n        this.log(`Found replays matching \"${term}\"`) :\r\n        this.log(`No replays matching \"${term}\"`)),\r\n      catchError(this.handleError<Replay[]>('searchReplays', []))\r\n    );\r\n  }\r\n\r\n  /* GET the root trial of a replay using replay uuid */\r\n  getReplayRootTrial(uuid: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/root-trial/${uuid}`;\r\n    return this.http.get<Trial>(url).pipe(\r\n      tap(_ => this.log(`Get replay root uuid=${uuid}`)),\r\n      catchError(this.handleError<Trial>(`getReplayRoot uuid=${uuid}`))\r\n    );\r\n  }\r\n\r\n  /* GET list of Replay parents for a Replay */\r\n  getReplayParents(uuid: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/parents/${uuid}`;\r\n    return this.http.get<Trial>(url).pipe(\r\n      tap(_ => this.log(`Get replay parents of uuid=${uuid}`)),\r\n      catchError(this.handleError<Trial>(`getReplayParents uuid=${uuid}`))\r\n    );\r\n  }\r\n\r\n  /** GET replay from the server */\r\n  abortReplay(): Observable<boolean> {\r\n    const url = `${this.replaysUrl}/run/abort`;\r\n    return this.http.get<boolean>(url)\r\n      .pipe(\r\n        tap(_ => this.log('Replay aborted!')),\r\n        catchError(this.handleError<boolean>('abortReplay', false))\r\n      );\r\n  }\r\n\r\n  /* GET the existence of the replay in elasticsearch */\r\n  getExistReplay(uuid: string, index: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/${uuid}/exist?index=${index}`;\r\n    return this.http.get<boolean>(url).pipe(\r\n      tap(exist => this.log(`Replay ${uuid} ${exist ? 'exists' : 'does not exist'} in elasticsearch index ${index}`)),\r\n      catchError(this.handleError<boolean>(`Replay ${uuid} exist in elasticsearch index ${index}`))\r\n    );\r\n  }\r\n\r\n  //////// Save methods //////////\r\n\r\n  /** POST: add a new replays to the server */\r\n  createReplay(replay: Replay): Observable<Replay> {\r\n    return this.http.post<Replay>(this.replaysUrl, replay, this.httpOptions).pipe(\r\n      tap((newReplay: Replay) => this.log(`added replay with id=${newReplay.id}`)),\r\n      catchError(this.handleError<Replay>('createReplay'))\r\n    );\r\n  }\r\n\r\n  createReplayMessage(replayMessage: ReplayMessage): Observable<void> {\r\n    return this.mqttService.publish('replay', JSON.stringify(replayMessage), { qos: 2 }).pipe(\r\n      tap(_ => this.log(`Sent message over bus to create replay.`)),\r\n      catchError(this.handleError<void>('createReplayMessage'))\r\n    );\r\n  }\r\n\r\n  /** DELETE: delete the replays from the server */\r\n  deleteReplay(replay: Replay | number): Observable<Replay> {\r\n    const id = typeof replay === 'number' ? replay : replay.id;\r\n    const url = `${this.replaysUrl}/${id}`;\r\n\r\n    return this.http.delete<Replay>(url, this.httpOptions).pipe(\r\n      tap(_ => this.log(`Deleted replay id=${id}`)),\r\n      catchError(this.handleError<Replay>('deleteReplay'))\r\n    );\r\n  }\r\n\r\n  /** PUT: update the replays on the server */\r\n  updateReplay(replay: Replay): Observable<any> {\r\n    const id = replay.id;\r\n    const url = `${this.replaysUrl}/${id}`;\r\n\r\n    return this.http.put(url, replay, this.httpOptions).pipe(\r\n      tap(_ => this.log(`Updated replay id=${replay.id}`)),\r\n      catchError(this.handleError<any>('updateReplay'))\r\n    );\r\n  }\r\n\r\n  /** POST: run a replay using elasticsearch index */\r\n  runReplay(message: ReplayMessage, index: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/run/?index=${index}`;\r\n    this._isReplayCreated.next(true);\r\n    return this.http.post<Replay>(url, message, this.httpOptions).pipe(\r\n      tap((newReplay: Replay) => {\r\n        if (newReplay === null) {\r\n          this.log(`Replay was not run.`);\r\n          this._isReplayCreated.next(false);\r\n        } else {\r\n          this.log(`Replay running with id=${newReplay.id}`);\r\n          this._isReplayCreated.next(false);\r\n        }\r\n      }),\r\n      catchError(this.handleError<ReplayMessage>('createReplay'))\r\n    );\r\n  }\r\n\r\n  runQuickTrial(uuid: string, ignore_message_list: IgnoreListItem[], ignore_source_list: string[], ignore_topic_list: string[], index: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/run/trial/${uuid}?index=${index}&quick=true`;\r\n    this._isReplayCreated.next(true);\r\n    const body = {\r\n      ignore_message_list,\r\n      ignore_source_list,\r\n      ignore_topic_list,\r\n    };\r\n    return this.http.post<MessageApiResult>(url, body, this.httpOptions).pipe(\r\n      tap((messageApiResult: MessageApiResult) => {\r\n        if (messageApiResult.result === 'success'){\r\n          this.log(`${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        } else {\r\n          this.log(`Replay was not run: ${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        }\r\n      }),\r\n      catchError(this.handleError<MessageApiResult>('createReplay'))\r\n    );\r\n  }\r\n\r\n  runQuickReplay(uuid: string, ignore_message_list: IgnoreListItem[], ignore_source_list: string[], ignore_topic_list: string[], index: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/run/replay/${uuid}?index=${index}&quick=true`;\r\n    this._isReplayCreated.next(true);\r\n    const body = {\r\n      ignore_message_list,\r\n      ignore_source_list,\r\n      ignore_topic_list,\r\n    };\r\n    return this.http.post<MessageApiResult>(url, body, this.httpOptions).pipe(\r\n      tap((messageApiResult: MessageApiResult) => {\r\n        if (messageApiResult.result === 'success'){\r\n          this.log(`${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        } else {\r\n          this.log(`Replay was not run: ${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        }\r\n      }),\r\n      catchError(this.handleError<MessageApiResult>('createReplay'))\r\n    );\r\n  }\r\n\r\n  runBatchTrial(replay_objects: ReplayObject[], ignore_message_list: IgnoreListItem[], ignore_source_list: string[], ignore_topic_list: string[], restart: boolean, index: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/run/batch/trial?index=${index}`;\r\n    this._isReplayCreated.next(true);\r\n    const body = {\r\n      replay_objects,\r\n      ignore_message_list,\r\n      ignore_source_list,\r\n      ignore_topic_list,\r\n      restart,\r\n    };\r\n    return this.http.post<MessageApiResult>(url, body, this.httpOptions).pipe(\r\n      tap((messageApiResult: MessageApiResult) => {\r\n        if (messageApiResult.result === 'success'){\r\n          this.log(`${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        } else {\r\n          this.log(`Replay was not run: ${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        }\r\n      }),\r\n      catchError(this.handleError<MessageApiResult>('createReplay'))\r\n    );\r\n  }\r\n\r\n  runBatchReplay(replay_objects: ReplayObject[], ignore_message_list: IgnoreListItem[], ignore_source_list: string[], ignore_topic_list: string[], restart: boolean, index: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/run/batch/replay?index=${index}`;\r\n    this._isReplayCreated.next(true);\r\n    const body = {\r\n      replay_objects,\r\n      ignore_message_list,\r\n      ignore_source_list,\r\n      ignore_topic_list,\r\n      restart,\r\n    };\r\n    return this.http.post<MessageApiResult>(url, body, this.httpOptions).pipe(\r\n      tap((messageApiResult: MessageApiResult) => {\r\n        if (messageApiResult.result === 'success'){\r\n          this.log(`${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        } else {\r\n          this.log(`Replay was not run: ${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        }\r\n      }),\r\n      catchError(this.handleError<MessageApiResult>('createReplay'))\r\n    );\r\n  }\r\n\r\n  public generateReplayMessage(trial_id: string, experiment_id: string, replay_parent_id: string, replay_parent_type: string, ignore_message_list: IgnoreListItem[], ignore_source_list: string[], ignore_topic_list: string[], sub_type: string, source: string, version: string): ReplayMessage {\r\n    return {\r\n      header: {\r\n        timestamp: moment().toDate().toISOString(),\r\n        message_type: 'replay',\r\n        version: environment.testbedVersion\r\n      },\r\n      msg: {\r\n        sub_type,\r\n        source,\r\n        experiment_id,\r\n        trial_id,\r\n        timestamp: moment().toDate().toISOString(),\r\n        version,\r\n        replay_id: uuidv4(),\r\n        replay_parent_id,\r\n        replay_parent_type\r\n      },\r\n      data: {\r\n        ignore_message_list,\r\n        ignore_source_list,\r\n        ignore_topic_list\r\n      }\r\n    };\r\n  }\r\n\r\n  public generateExportMessage(replay: Replay, parents: Trial[] | Replay[], index: string, sub_type: string, source: string, version: string): ReplayExportMessage {\r\n    const root = parents[parents.length - 1] as Trial;\r\n    if (root === null) {\r\n      this.log('Root item in replay parent tree was not a Trial!');\r\n      return null;\r\n    }\r\n    return {\r\n      header: {\r\n        timestamp: moment().toDate().toISOString(),\r\n        message_type: 'export',\r\n        version: environment.testbedVersion\r\n      },\r\n      msg: {\r\n        sub_type,\r\n        source,\r\n        experiment_id: root.experiment.experiment_id,\r\n        trial_id: root.trial_id,\r\n        timestamp: moment().toDate().toISOString(),\r\n        version,\r\n        replay_id: replay.replay_id,\r\n        replay_parent_id: replay.replay_parent_id,\r\n        replay_parent_type: replay.replay_parent_type\r\n      },\r\n      data: {\r\n        index,\r\n        ignore_message_list: replay.ignore_message_list,\r\n        ignore_source_list: replay.ignore_source_list,\r\n        ignore_topic_list: replay.ignore_topic_list,\r\n        metadata: {\r\n          replay,\r\n          parents\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  public sendExportMessage(replayExportMessage: ReplayExportMessage) {\r\n    return this.mqttService.publish('metadata/replay/export', JSON.stringify(replayExportMessage), { qos: 2 }).pipe(\r\n      tap(_ => {\r\n        this.log(`Exported replay using message bus.`);\r\n      }),\r\n      catchError(this.handleError<void>('replayExportMessage'))\r\n    );\r\n  }\r\n\r\n  public sendRunMessage(replay: Replay) {\r\n    return this.mqttService.publish('metadata/replay/run', JSON.stringify(replay), { qos: 2 }).pipe(\r\n      tap(_ => {\r\n        this.log(`Running replay using message bus.`);\r\n      }),\r\n      catchError(this.handleError<void>('replayRunMessage'))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  /** Log a ReplayService message with the MessageService */\r\n  private log(message: string) {\r\n    this.loggingService.add(`ReplayService: ${message}`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Trial } from '../trial/trial';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport { TrialMessage } from '../trial/trial-message';\r\nimport { TrialExportMessage } from '../trial/trial-export-message';\r\nimport { MqttService } from 'ngx-mqtt';\r\n// import moment from 'moment';\r\n\r\nconst moment = require('moment');\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TrialService {\r\n  private trialsUrl = environment.metadataAppUrl + '/trials';  // URL to web api\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private loggingService: LoggingService,\r\n    private mqttService: MqttService\r\n  ) { }\r\n\r\n  /** GET trials from the server */\r\n  readTrials(): Observable<Trial[]> {\r\n    return this.http.get<Trial[]>(this.trialsUrl)\r\n      .pipe(\r\n        tap(_ => this.log('Read trials')),\r\n        catchError(this.handleError<Trial[]>('readTrials', []))\r\n      );\r\n  }\r\n\r\n  /** GET trials by id. Return `undefined` when id not found */\r\n  readTrialNo404<Data>(id: number): Observable<Trial> {\r\n    const url = `${this.trialsUrl}/?id=${id}`;\r\n    return this.http.get<Trial[]>(url)\r\n      .pipe(\r\n        map(trials => trials[0]), // returns a {0|1} element array\r\n        tap(h => {\r\n          const outcome = h ? `Read` : `Did not find`;\r\n          this.log(`${outcome} trial id=${id}`);\r\n        }),\r\n        catchError(this.handleError<Trial>(`getTrials id=${id}`))\r\n      );\r\n  }\r\n\r\n  /** GET trials by uuid. Return `undefined` when id not found */\r\n  readTrialUUID(uuid: string): Observable<Trial> {\r\n    const url = `${this.trialsUrl}/uuid/${uuid}`;\r\n    return this.http.get<Trial>(url).pipe(\r\n      tap(_ => this.log(`Read trial id=${uuid}`)),\r\n      catchError(this.handleError<Trial>(`getTrials uuid=${uuid}`))\r\n    );\r\n  }\r\n\r\n  /** GET trials by id. Will 404 if id not found */\r\n  readTrial(id: number): Observable<Trial> {\r\n    const url = `${this.trialsUrl}/${id}`;\r\n    return this.http.get<Trial>(url).pipe(\r\n      tap(_ => this.log(`Read trial id=${id}`)),\r\n      catchError(this.handleError<Trial>(`getTrials id=${id}`))\r\n    );\r\n  }\r\n\r\n  /* GET trials whose name contains export term */\r\n  searchTrials(term: string): Observable<Trial[]> {\r\n    if (!term.trim()) {\r\n      // if not export term, return empty trials array.\r\n      return of([]);\r\n    }\r\n    return this.http.get<Trial[]>(`${this.trialsUrl}/?name=${term}`).pipe(\r\n      tap(x => x.length ?\r\n        this.log(`Found trials matching \"${term}\"`) :\r\n        this.log(`No trials matching \"${term}\"`)),\r\n      catchError(this.handleError<Trial[]>('searchTrials', []))\r\n    );\r\n  }\r\n\r\n  /* GET the existence of the replay in elasticsearch */\r\n  getExistReplay(uuid: string, index: string): Observable<any> {\r\n    const url = `${this.trialsUrl}/${uuid}/exist?index=${index}`;\r\n    return this.http.get<boolean>(url).pipe(\r\n      tap(exist => this.log(`Trial ${uuid} ${exist ? 'exists' : 'does not exist'} in elasticsearch index ${index}`)),\r\n      catchError(this.handleError<boolean>(`Trial ${uuid} exist in elasticsearch index ${index}`))\r\n    );\r\n  }\r\n\r\n  //////// Save methods //////////\r\n\r\n  /** POST: add a new trials to the server */\r\n  createTrial(trial: Trial): Observable<Trial> {\r\n    return this.http.post<Trial>(this.trialsUrl, trial, this.httpOptions).pipe(\r\n      tap((newTrial: Trial) => this.log(`added trial with id=${newTrial.id}`)),\r\n      catchError(this.handleError<Trial>('createTrial'))\r\n    );\r\n  }\r\n\r\n  createTrialMessage(trialMessage: TrialMessage): Observable<void> {\r\n    return this.mqttService.publish('trial', JSON.stringify(trialMessage), { qos: 1 }).pipe(\r\n      tap(_ => this.log(`Sent message over bus to create trial.`)),\r\n      catchError(this.handleError<void>('createTrialMessage'))\r\n    );\r\n  }\r\n\r\n  /** DELETE: delete the trials from the server */\r\n  deleteTrial(trial: Trial | number): Observable<Trial> {\r\n    const id = typeof trial === 'number' ? trial : trial.id;\r\n    const url = `${this.trialsUrl}/${id}`;\r\n\r\n    return this.http.delete<Trial>(url, this.httpOptions).pipe(\r\n      tap(_ => this.log(`Deleted trial id=${id}`)),\r\n      catchError(this.handleError<Trial>('deleteTrial'))\r\n    );\r\n  }\r\n\r\n  /** PUT: update the trials on the server */\r\n  updateTrial(trial: Trial): Observable<any> {\r\n    const id = trial.id;\r\n    const url = `${this.trialsUrl}/${id}`;\r\n\r\n    return this.http.put(url, trial, this.httpOptions).pipe(\r\n      tap(_ => this.log(`Updated trial id=${trial.id}`)),\r\n      catchError(this.handleError<any>('updateTrial'))\r\n    );\r\n  }\r\n\r\n  public generateTrialMessage(trial: Trial, sub_type: string, source: string, version: string, replay_id: string, replay_parent_id: string, replay_parent_type: string): TrialMessage {\r\n    const trialMessage = {\r\n      header: {\r\n        timestamp: trial.date,\r\n        message_type: 'trial',\r\n        version: environment.testbedVersion\r\n      },\r\n      msg: {\r\n        sub_type,\r\n        source,\r\n        experiment_id: trial.experiment.experiment_id,\r\n        trial_id: trial.trial_id,\r\n        timestamp: moment().toDate().toISOString(),\r\n        version,\r\n        replay_id,\r\n        replay_parent_id,\r\n        replay_parent_type\r\n      },\r\n      data: {\r\n        name: trial.name,\r\n        date: trial.date,\r\n        experimenter: trial.experimenter,\r\n        subjects: trial.subjects,\r\n        trial_number: trial.trial_number,\r\n        group_number: trial.group_number,\r\n        study_number: trial.study_number,\r\n        condition: trial.condition,\r\n        notes: trial.notes,\r\n        testbed_version: trial.testbed_version,\r\n        experiment_name: trial.experiment.name,\r\n        experiment_date: trial.experiment.date,\r\n        experiment_author: trial.experiment.author,\r\n        experiment_mission: trial.experiment.mission\r\n      }\r\n    };\r\n    if (replay_id === null) {\r\n      delete trialMessage.msg.replay_id;\r\n    }\r\n    if (replay_parent_id === null) {\r\n      delete trialMessage.msg.replay_parent_id;\r\n    }\r\n    if (replay_parent_type === null) {\r\n      delete trialMessage.msg.replay_parent_type;\r\n    }\r\n    return trialMessage;\r\n  }\r\n\r\n  public generateExportMessage(trial: Trial, index: string, sub_type: string, source: string, version: string, replay_id: string, replay_parent_id: string, replay_parent_type: string): TrialExportMessage {\r\n    if (trial === null) {\r\n      return null;\r\n    }\r\n    const trialExportMessage = {\r\n      header: {\r\n        timestamp: moment().toDate().toISOString(),\r\n        message_type: 'export',\r\n        version: index\r\n      },\r\n      msg: {\r\n        sub_type,\r\n        source,\r\n        experiment_id: trial.experiment.experiment_id,\r\n        trial_id: trial.trial_id,\r\n        timestamp: moment().toDate().toISOString(),\r\n        version,\r\n        replay_id,\r\n        replay_parent_id,\r\n        replay_parent_type\r\n      },\r\n      data: {\r\n        index,\r\n        metadata: {\r\n          trial: {\r\n            name: trial.name,\r\n            date: trial.date,\r\n            experimenter: trial.experimenter,\r\n            subjects: trial.subjects,\r\n            trial_number: trial.trial_number,\r\n            group_number: trial.group_number,\r\n            study_number: trial.study_number,\r\n            condition: trial.condition,\r\n            notes: trial.notes,\r\n            testbed_version: trial.testbed_version,\r\n            experiment_name: trial.experiment.name,\r\n            experiment_date: trial.experiment.date,\r\n            experiment_author: trial.experiment.author,\r\n            experiment_mission: trial.experiment.mission\r\n          }\r\n        }\r\n      }\r\n    };\r\n    if (replay_id === null) {\r\n      delete trialExportMessage.msg.replay_id;\r\n    }\r\n    if (replay_parent_id === null) {\r\n      delete trialExportMessage.msg.replay_parent_id;\r\n    }\r\n    if (replay_parent_type === null) {\r\n      delete trialExportMessage.msg.replay_parent_type;\r\n    }\r\n    return trialExportMessage;\r\n  }\r\n\r\n  public sendExportMessage(trialExportMessage: TrialExportMessage) {\r\n    if (trialExportMessage !== null) {\r\n      return this.mqttService.publish('metadata/trial/export', JSON.stringify(trialExportMessage), {qos: 1}).pipe(\r\n        tap(_ => {\r\n          this.log(`Exported trial using message bus.`);\r\n        }),\r\n        catchError(this.handleError<void>('trialExportMessage'))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  /** Log a TrialService message with the MessageService */\r\n  private log(message: string) {\r\n    this.loggingService.add(`TrialService: ${message}`);\r\n  }\r\n}\r\n"]}