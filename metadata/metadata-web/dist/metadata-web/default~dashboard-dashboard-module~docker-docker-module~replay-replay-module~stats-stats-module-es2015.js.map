{"version":3,"sources":["./src/app/replay/replay.service.ts","./src/app/trial/trial.service.ts"],"names":[],"mappings":"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","file":"default~dashboard-dashboard-module~docker-docker-module~replay-replay-module~stats-stats-module-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { environment } from '../../environments/environment';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { MqttService } from 'ngx-mqtt';\r\nimport {BehaviorSubject, Observable, of} from 'rxjs';\r\nimport { Replay } from './replay';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { ReplayMessage } from './replay-message';\r\nimport { ReplayExportMessage } from './replay-export-message';\r\nimport { Trial } from '../trial/trial';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {MessageApiResult} from '../dashboard/run-replay/MessageApiResult';\r\nimport {IgnoreListItem} from './ignore-list-item';\r\nimport {ReplayObject} from '../dashboard/batch-run-replay/replayObject';\r\n// import moment from 'moment';\r\n\r\nconst moment = require('moment');\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReplayService {\r\n  private replaysUrl = environment.metadataAppUrl + '/replays';  // URL to web api\r\n\r\n  private _isReplayCreated: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n  public isReplayCreated = this._isReplayCreated.asObservable();\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private loggingService: LoggingService,\r\n    private mqttService: MqttService\r\n  ) { }\r\n\r\n  /** GET replay from the server */\r\n  readReplays(): Observable<Replay[]> {\r\n    return this.http.get<Replay[]>(this.replaysUrl)\r\n      .pipe(\r\n        tap(_ => {\r\n          this.log('Read replays');\r\n        }),\r\n        catchError(this.handleError<Replay[]>('readReplays', []))\r\n      );\r\n  }\r\n\r\n  /** GET replays by id. Return `undefined` when id not found */\r\n  readReplayNo404<Data>(id: number): Observable<Replay> {\r\n    const url = `${this.replaysUrl}/?id=${id}`;\r\n    return this.http.get<Replay[]>(url)\r\n      .pipe(\r\n        map(replays => replays[0]), // returns a {0|1} element array\r\n        tap(h => {\r\n          const outcome = h ? `Read` : `Did not find`;\r\n          this.log(`${outcome} replay id=${id}`);\r\n        }),\r\n        catchError(this.handleError<Replay>(`getReplays id=${id}`))\r\n      );\r\n  }\r\n\r\n  /** GET replays by id. Will 404 if id not found */\r\n  readReplay(id: number): Observable<Replay> {\r\n    const url = `${this.replaysUrl}/${id}`;\r\n    return this.http.get<Replay>(url).pipe(\r\n      tap(_ => this.log(`Read replay id=${id}`)),\r\n      catchError(this.handleError<Replay>(`getReplays id=${id}`))\r\n    );\r\n  }\r\n\r\n  /* GET replays whose name contains export term */\r\n  searchReplays(term: string): Observable<Replay[]> {\r\n    if (!term.trim()) {\r\n      // if not export term, return empty replays array.\r\n      return of([]);\r\n    }\r\n    return this.http.get<Replay[]>(`${this.replaysUrl}/?name=${term}`).pipe(\r\n      tap(x => x.length ?\r\n        this.log(`Found replays matching \"${term}\"`) :\r\n        this.log(`No replays matching \"${term}\"`)),\r\n      catchError(this.handleError<Replay[]>('searchReplays', []))\r\n    );\r\n  }\r\n\r\n  /* GET the root trial of a replay using replay uuid */\r\n  getReplayRootTrial(uuid: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/root-trial/${uuid}`;\r\n    return this.http.get<Trial>(url).pipe(\r\n      tap(_ => this.log(`Get replay root uuid=${uuid}`)),\r\n      catchError(this.handleError<Trial>(`getReplayRoot uuid=${uuid}`))\r\n    );\r\n  }\r\n\r\n  /* GET list of Replay parents for a Replay */\r\n  getReplayParents(uuid: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/parents/${uuid}`;\r\n    return this.http.get<Trial>(url).pipe(\r\n      tap(_ => this.log(`Get replay parents of uuid=${uuid}`)),\r\n      catchError(this.handleError<Trial>(`getReplayParents uuid=${uuid}`))\r\n    );\r\n  }\r\n\r\n  /** GET replay from the server */\r\n  abortReplay(): Observable<boolean> {\r\n    const url = `${this.replaysUrl}/run/abort`;\r\n    return this.http.get<boolean>(url)\r\n      .pipe(\r\n        tap(_ => this.log('Replay aborted!')),\r\n        catchError(this.handleError<boolean>('abortReplay', false))\r\n      );\r\n  }\r\n\r\n  /* GET the existence of the replay in elasticsearch */\r\n  getExistReplay(uuid: string, index: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/${uuid}/exist?index=${index}`;\r\n    return this.http.get<boolean>(url).pipe(\r\n      tap(exist => this.log(`Replay ${uuid} ${exist ? 'exists' : 'does not exist'} in elasticsearch index ${index}`)),\r\n      catchError(this.handleError<boolean>(`Replay ${uuid} exist in elasticsearch index ${index}`))\r\n    );\r\n  }\r\n\r\n  //////// Save methods //////////\r\n\r\n  /** POST: add a new replays to the server */\r\n  createReplay(replay: Replay): Observable<Replay> {\r\n    return this.http.post<Replay>(this.replaysUrl, replay, this.httpOptions).pipe(\r\n      tap((newReplay: Replay) => this.log(`added replay with id=${newReplay.id}`)),\r\n      catchError(this.handleError<Replay>('createReplay'))\r\n    );\r\n  }\r\n\r\n  createReplayMessage(replayMessage: ReplayMessage): Observable<void> {\r\n    return this.mqttService.publish('replay', JSON.stringify(replayMessage), { qos: 2 }).pipe(\r\n      tap(_ => this.log(`Sent message over bus to create replay.`)),\r\n      catchError(this.handleError<void>('createReplayMessage'))\r\n    );\r\n  }\r\n\r\n  /** DELETE: delete the replays from the server */\r\n  deleteReplay(replay: Replay | number): Observable<Replay> {\r\n    const id = typeof replay === 'number' ? replay : replay.id;\r\n    const url = `${this.replaysUrl}/${id}`;\r\n\r\n    return this.http.delete<Replay>(url, this.httpOptions).pipe(\r\n      tap(_ => this.log(`Deleted replay id=${id}`)),\r\n      catchError(this.handleError<Replay>('deleteReplay'))\r\n    );\r\n  }\r\n\r\n  /** PUT: update the replays on the server */\r\n  updateReplay(replay: Replay): Observable<any> {\r\n    const id = replay.id;\r\n    const url = `${this.replaysUrl}/${id}`;\r\n\r\n    return this.http.put(url, replay, this.httpOptions).pipe(\r\n      tap(_ => this.log(`Updated replay id=${replay.id}`)),\r\n      catchError(this.handleError<any>('updateReplay'))\r\n    );\r\n  }\r\n\r\n  /** POST: run a replay using elasticsearch index */\r\n  runReplay(message: ReplayMessage, index: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/run/?index=${index}`;\r\n    this._isReplayCreated.next(true);\r\n    return this.http.post<Replay>(url, message, this.httpOptions).pipe(\r\n      tap((newReplay: Replay) => {\r\n        if (newReplay === null) {\r\n          this.log(`Replay was not run.`);\r\n          this._isReplayCreated.next(false);\r\n        } else {\r\n          this.log(`Replay running with id=${newReplay.id}`);\r\n          this._isReplayCreated.next(false);\r\n        }\r\n      }),\r\n      catchError(this.handleError<ReplayMessage>('createReplay'))\r\n    );\r\n  }\r\n\r\n  runQuickTrial(uuid: string, ignore_message_list: IgnoreListItem[], ignore_source_list: string[], ignore_topic_list: string[], index: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/run/trial/${uuid}?index=${index}&quick=true`;\r\n    this._isReplayCreated.next(true);\r\n    const body = {\r\n      ignore_message_list,\r\n      ignore_source_list,\r\n      ignore_topic_list,\r\n    };\r\n    return this.http.post<MessageApiResult>(url, body, this.httpOptions).pipe(\r\n      tap((messageApiResult: MessageApiResult) => {\r\n        if (messageApiResult.result === 'success'){\r\n          this.log(`${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        } else {\r\n          this.log(`Replay was not run: ${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        }\r\n      }),\r\n      catchError(this.handleError<MessageApiResult>('createReplay'))\r\n    );\r\n  }\r\n\r\n  runQuickReplay(uuid: string, ignore_message_list: IgnoreListItem[], ignore_source_list: string[], ignore_topic_list: string[], index: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/run/replay/${uuid}?index=${index}&quick=true`;\r\n    this._isReplayCreated.next(true);\r\n    const body = {\r\n      ignore_message_list,\r\n      ignore_source_list,\r\n      ignore_topic_list,\r\n    };\r\n    return this.http.post<MessageApiResult>(url, body, this.httpOptions).pipe(\r\n      tap((messageApiResult: MessageApiResult) => {\r\n        if (messageApiResult.result === 'success'){\r\n          this.log(`${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        } else {\r\n          this.log(`Replay was not run: ${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        }\r\n      }),\r\n      catchError(this.handleError<MessageApiResult>('createReplay'))\r\n    );\r\n  }\r\n\r\n  runBatchTrial(replay_objects: ReplayObject[], ignore_message_list: IgnoreListItem[], ignore_source_list: string[], ignore_topic_list: string[], restart: boolean, index: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/run/batch/trial?index=${index}`;\r\n    this._isReplayCreated.next(true);\r\n    const body = {\r\n      replay_objects,\r\n      ignore_message_list,\r\n      ignore_source_list,\r\n      ignore_topic_list,\r\n      restart,\r\n    };\r\n    return this.http.post<MessageApiResult>(url, body, this.httpOptions).pipe(\r\n      tap((messageApiResult: MessageApiResult) => {\r\n        if (messageApiResult.result === 'success'){\r\n          this.log(`${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        } else {\r\n          this.log(`Replay was not run: ${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        }\r\n      }),\r\n      catchError(this.handleError<MessageApiResult>('createReplay'))\r\n    );\r\n  }\r\n\r\n  runBatchReplay(replay_objects: ReplayObject[], ignore_message_list: IgnoreListItem[], ignore_source_list: string[], ignore_topic_list: string[], restart: boolean, index: string): Observable<any> {\r\n    const url = `${this.replaysUrl}/run/batch/replay?index=${index}`;\r\n    this._isReplayCreated.next(true);\r\n    const body = {\r\n      replay_objects,\r\n      ignore_message_list,\r\n      ignore_source_list,\r\n      ignore_topic_list,\r\n      restart,\r\n    };\r\n    return this.http.post<MessageApiResult>(url, body, this.httpOptions).pipe(\r\n      tap((messageApiResult: MessageApiResult) => {\r\n        if (messageApiResult.result === 'success'){\r\n          this.log(`${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        } else {\r\n          this.log(`Replay was not run: ${messageApiResult.message}`);\r\n          this._isReplayCreated.next(false);\r\n        }\r\n      }),\r\n      catchError(this.handleError<MessageApiResult>('createReplay'))\r\n    );\r\n  }\r\n\r\n  public generateReplayMessage(trial_id: string, experiment_id: string, replay_parent_id: string, replay_parent_type: string, ignore_message_list: IgnoreListItem[], ignore_source_list: string[], ignore_topic_list: string[], sub_type: string, source: string, version: string): ReplayMessage {\r\n    return {\r\n      header: {\r\n        timestamp: moment().toDate().toISOString(),\r\n        message_type: 'replay',\r\n        version: environment.testbedVersion\r\n      },\r\n      msg: {\r\n        sub_type,\r\n        source,\r\n        experiment_id,\r\n        trial_id,\r\n        timestamp: moment().toDate().toISOString(),\r\n        version,\r\n        replay_id: uuidv4(),\r\n        replay_parent_id,\r\n        replay_parent_type\r\n      },\r\n      data: {\r\n        ignore_message_list,\r\n        ignore_source_list,\r\n        ignore_topic_list\r\n      }\r\n    };\r\n  }\r\n\r\n  public generateExportMessage(replay: Replay, parents: Trial[] | Replay[], index: string, sub_type: string, source: string, version: string): ReplayExportMessage {\r\n    const root = parents[parents.length - 1] as Trial;\r\n    if (root === null) {\r\n      this.log('Root item in replay parent tree was not a Trial!');\r\n      return null;\r\n    }\r\n    return {\r\n      header: {\r\n        timestamp: moment().toDate().toISOString(),\r\n        message_type: 'export',\r\n        version: environment.testbedVersion\r\n      },\r\n      msg: {\r\n        sub_type,\r\n        source,\r\n        experiment_id: root.experiment.experiment_id,\r\n        trial_id: root.trial_id,\r\n        timestamp: moment().toDate().toISOString(),\r\n        version,\r\n        replay_id: replay.replay_id,\r\n        replay_parent_id: replay.replay_parent_id,\r\n        replay_parent_type: replay.replay_parent_type\r\n      },\r\n      data: {\r\n        index,\r\n        ignore_message_list: replay.ignore_message_list,\r\n        ignore_source_list: replay.ignore_source_list,\r\n        ignore_topic_list: replay.ignore_topic_list,\r\n        metadata: {\r\n          replay,\r\n          parents\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  public sendExportMessage(replayExportMessage: ReplayExportMessage) {\r\n    return this.mqttService.publish('metadata/replay/export', JSON.stringify(replayExportMessage), { qos: 2 }).pipe(\r\n      tap(_ => {\r\n        this.log(`Exported replay using message bus.`);\r\n      }),\r\n      catchError(this.handleError<void>('replayExportMessage'))\r\n    );\r\n  }\r\n\r\n  public sendRunMessage(replay: Replay) {\r\n    return this.mqttService.publish('metadata/replay/run', JSON.stringify(replay), { qos: 2 }).pipe(\r\n      tap(_ => {\r\n        this.log(`Running replay using message bus.`);\r\n      }),\r\n      catchError(this.handleError<void>('replayRunMessage'))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  /** Log a ReplayService message with the MessageService */\r\n  private log(message: string) {\r\n    this.loggingService.add(`ReplayService: ${message}`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Trial } from '../trial/trial';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport { TrialMessage } from '../trial/trial-message';\r\nimport { TrialExportMessage } from '../trial/trial-export-message';\r\nimport { MqttService } from 'ngx-mqtt';\r\n// import moment from 'moment';\r\n\r\nconst moment = require('moment');\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TrialService {\r\n  private trialsUrl = environment.metadataAppUrl + '/trials';  // URL to web api\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private loggingService: LoggingService,\r\n    private mqttService: MqttService\r\n  ) { }\r\n\r\n  /** GET trials from the server */\r\n  readTrials(): Observable<Trial[]> {\r\n    return this.http.get<Trial[]>(this.trialsUrl)\r\n      .pipe(\r\n        tap(_ => this.log('Read trials')),\r\n        catchError(this.handleError<Trial[]>('readTrials', []))\r\n      );\r\n  }\r\n\r\n  /** GET trials by id. Return `undefined` when id not found */\r\n  readTrialNo404<Data>(id: number): Observable<Trial> {\r\n    const url = `${this.trialsUrl}/?id=${id}`;\r\n    return this.http.get<Trial[]>(url)\r\n      .pipe(\r\n        map(trials => trials[0]), // returns a {0|1} element array\r\n        tap(h => {\r\n          const outcome = h ? `Read` : `Did not find`;\r\n          this.log(`${outcome} trial id=${id}`);\r\n        }),\r\n        catchError(this.handleError<Trial>(`getTrials id=${id}`))\r\n      );\r\n  }\r\n\r\n  /** GET trials by uuid. Return `undefined` when id not found */\r\n  readTrialUUID(uuid: string): Observable<Trial> {\r\n    const url = `${this.trialsUrl}/uuid/${uuid}`;\r\n    return this.http.get<Trial>(url).pipe(\r\n      tap(_ => this.log(`Read trial id=${uuid}`)),\r\n      catchError(this.handleError<Trial>(`getTrials uuid=${uuid}`))\r\n    );\r\n  }\r\n\r\n  /** GET trials by id. Will 404 if id not found */\r\n  readTrial(id: number): Observable<Trial> {\r\n    const url = `${this.trialsUrl}/${id}`;\r\n    return this.http.get<Trial>(url).pipe(\r\n      tap(_ => this.log(`Read trial id=${id}`)),\r\n      catchError(this.handleError<Trial>(`getTrials id=${id}`))\r\n    );\r\n  }\r\n\r\n  /* GET trials whose name contains export term */\r\n  searchTrials(term: string): Observable<Trial[]> {\r\n    if (!term.trim()) {\r\n      // if not export term, return empty trials array.\r\n      return of([]);\r\n    }\r\n    return this.http.get<Trial[]>(`${this.trialsUrl}/?name=${term}`).pipe(\r\n      tap(x => x.length ?\r\n        this.log(`Found trials matching \"${term}\"`) :\r\n        this.log(`No trials matching \"${term}\"`)),\r\n      catchError(this.handleError<Trial[]>('searchTrials', []))\r\n    );\r\n  }\r\n\r\n  /* GET the existence of the replay in elasticsearch */\r\n  getExistReplay(uuid: string, index: string): Observable<any> {\r\n    const url = `${this.trialsUrl}/${uuid}/exist?index=${index}`;\r\n    return this.http.get<boolean>(url).pipe(\r\n      tap(exist => this.log(`Trial ${uuid} ${exist ? 'exists' : 'does not exist'} in elasticsearch index ${index}`)),\r\n      catchError(this.handleError<boolean>(`Trial ${uuid} exist in elasticsearch index ${index}`))\r\n    );\r\n  }\r\n\r\n  //////// Save methods //////////\r\n\r\n  /** POST: add a new trials to the server */\r\n  createTrial(trial: Trial): Observable<Trial> {\r\n    return this.http.post<Trial>(this.trialsUrl, trial, this.httpOptions).pipe(\r\n      tap((newTrial: Trial) => this.log(`added trial with id=${newTrial.id}`)),\r\n      catchError(this.handleError<Trial>('createTrial'))\r\n    );\r\n  }\r\n\r\n  createTrialMessage(trialMessage: TrialMessage): Observable<void> {\r\n    return this.mqttService.publish('trial', JSON.stringify(trialMessage), { qos: 1 }).pipe(\r\n      tap(_ => this.log(`Sent message over bus to create trial.`)),\r\n      catchError(this.handleError<void>('createTrialMessage'))\r\n    );\r\n  }\r\n\r\n  /** DELETE: delete the trials from the server */\r\n  deleteTrial(trial: Trial | number): Observable<Trial> {\r\n    const id = typeof trial === 'number' ? trial : trial.id;\r\n    const url = `${this.trialsUrl}/${id}`;\r\n\r\n    return this.http.delete<Trial>(url, this.httpOptions).pipe(\r\n      tap(_ => this.log(`Deleted trial id=${id}`)),\r\n      catchError(this.handleError<Trial>('deleteTrial'))\r\n    );\r\n  }\r\n\r\n  /** PUT: update the trials on the server */\r\n  updateTrial(trial: Trial): Observable<any> {\r\n    const id = trial.id;\r\n    const url = `${this.trialsUrl}/${id}`;\r\n\r\n    return this.http.put(url, trial, this.httpOptions).pipe(\r\n      tap(_ => this.log(`Updated trial id=${trial.id}`)),\r\n      catchError(this.handleError<any>('updateTrial'))\r\n    );\r\n  }\r\n\r\n  public generateTrialMessage(trial: Trial, sub_type: string, source: string, version: string, replay_id: string, replay_parent_id: string, replay_parent_type: string): TrialMessage {\r\n    const trialMessage = {\r\n      header: {\r\n        timestamp: trial.date,\r\n        message_type: 'trial',\r\n        version: environment.testbedVersion\r\n      },\r\n      msg: {\r\n        sub_type,\r\n        source,\r\n        experiment_id: trial.experiment.experiment_id,\r\n        trial_id: trial.trial_id,\r\n        timestamp: moment().toDate().toISOString(),\r\n        version,\r\n        replay_id,\r\n        replay_parent_id,\r\n        replay_parent_type\r\n      },\r\n      data: {\r\n        name: trial.name,\r\n        date: trial.date,\r\n        experimenter: trial.experimenter,\r\n        subjects: trial.subjects,\r\n        trial_number: trial.trial_number,\r\n        group_number: trial.group_number,\r\n        study_number: trial.study_number,\r\n        condition: trial.condition,\r\n        notes: trial.notes,\r\n        testbed_version: trial.testbed_version,\r\n        experiment_name: trial.experiment.name,\r\n        experiment_date: trial.experiment.date,\r\n        experiment_author: trial.experiment.author,\r\n        experiment_mission: trial.experiment.mission\r\n      }\r\n    };\r\n    if (replay_id === null) {\r\n      delete trialMessage.msg.replay_id;\r\n    }\r\n    if (replay_parent_id === null) {\r\n      delete trialMessage.msg.replay_parent_id;\r\n    }\r\n    if (replay_parent_type === null) {\r\n      delete trialMessage.msg.replay_parent_type;\r\n    }\r\n    return trialMessage;\r\n  }\r\n\r\n  public generateExportMessage(trial: Trial, index: string, sub_type: string, source: string, version: string, replay_id: string, replay_parent_id: string, replay_parent_type: string): TrialExportMessage {\r\n    if (trial === null) {\r\n      return null;\r\n    }\r\n    const trialExportMessage = {\r\n      header: {\r\n        timestamp: moment().toDate().toISOString(),\r\n        message_type: 'export',\r\n        version: index\r\n      },\r\n      msg: {\r\n        sub_type,\r\n        source,\r\n        experiment_id: trial.experiment.experiment_id,\r\n        trial_id: trial.trial_id,\r\n        timestamp: moment().toDate().toISOString(),\r\n        version,\r\n        replay_id,\r\n        replay_parent_id,\r\n        replay_parent_type\r\n      },\r\n      data: {\r\n        index,\r\n        metadata: {\r\n          trial: {\r\n            name: trial.name,\r\n            date: trial.date,\r\n            experimenter: trial.experimenter,\r\n            subjects: trial.subjects,\r\n            trial_number: trial.trial_number,\r\n            group_number: trial.group_number,\r\n            study_number: trial.study_number,\r\n            condition: trial.condition,\r\n            notes: trial.notes,\r\n            testbed_version: trial.testbed_version,\r\n            experiment_name: trial.experiment.name,\r\n            experiment_date: trial.experiment.date,\r\n            experiment_author: trial.experiment.author,\r\n            experiment_mission: trial.experiment.mission\r\n          }\r\n        }\r\n      }\r\n    };\r\n    if (replay_id === null) {\r\n      delete trialExportMessage.msg.replay_id;\r\n    }\r\n    if (replay_parent_id === null) {\r\n      delete trialExportMessage.msg.replay_parent_id;\r\n    }\r\n    if (replay_parent_type === null) {\r\n      delete trialExportMessage.msg.replay_parent_type;\r\n    }\r\n    return trialExportMessage;\r\n  }\r\n\r\n  public sendExportMessage(trialExportMessage: TrialExportMessage) {\r\n    if (trialExportMessage !== null) {\r\n      return this.mqttService.publish('metadata/trial/export', JSON.stringify(trialExportMessage), {qos: 1}).pipe(\r\n        tap(_ => {\r\n          this.log(`Exported trial using message bus.`);\r\n        }),\r\n        catchError(this.handleError<void>('trialExportMessage'))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  /** Log a TrialService message with the MessageService */\r\n  private log(message: string) {\r\n    this.loggingService.add(`TrialService: ${message}`);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}