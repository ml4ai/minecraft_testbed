; ASIST testbed configuration file for single host configuration

;
; The config tool that uses this file only supports 2 level nested JSON properties
;

; Each section (except for 'configure') describes the config edits for one
; configuration file. Within each file's configure section there is a parameter
; named 'config_file', which is the relative path to the file to be edited. The
; other parameters in that secion correspond to the name of the property in the
; config file to be replaced and the new value to be used. For JSON config
; files, the property name can have at most 2 levels and is represented by
; <firstLevel>.<secondLevel>
;
; Generally, the config files should not need to be edited if you are running on a
; Windows  platform. However, in general, on a Linux or MacOS platform, the IP
; address of the MQTT message broker will need to be explicity specified.


[configure]

; This is the relative path from where the configurer tool is run to where the Local directory is
testbed_local_root = ../Local/

; This is just a message that will be printed out by the configurer tool when
; it runs as a reminder of any manual config that that needs to be done outside
; of the configurer tool
manual_message = None

;prefer if these default values didn't appear in this section, but can't get rid of them
;mqtthost
;mqttport

[MalmoContainer-config]
config_file = MalmoContainer/ConfigFolder/config.json

; IP address of MTQQ broker if not on Windows platform
mqtthost = host.docker.internal

[MalmoContainer-modsettings]
config_file = MinecraftServer/data/mods/ModSettings.json

; IP address of MTQQ broker if not on Windows platform
mqtthost = tcp://host.docker.internal:1883

[MalmoControl]
config_file = MalmoControl/appsettings.json

; The Mod.name property can be either malmo or asist
Mod.name = asist

; IP address of the MQTT broker if not on Windows platform
Mqtt.host = host.docker.internal
Mqtt.port = 1883

; The url for the metadata server rest interface, if no on Windows platform
MetadataServer.url = http://host.docker.internal:8080/experiments
;[ELK]


[MQTTPythonReferenceAgent]
config_file = ReferenceAgent/ConfigFolder/config.json

; IP address of MQTT broker if not on Windows platform
host = host.docker.internal

[IHMCLocationMonitorAgent]
config_file = ../Agents/IHMCLocationMonitor/ConfigFolder/config.json
host = host.docker.internal
port = 1883

[PyGLFoVAgent]
config_file = ../Agents/PyGLFoVAgent/ConfigFolder/config.json
host = host.docker.internal
port = 1883


[MQTTValidationServiceContainer]
config_file = MessageValidator/appsettings.json

; IP address of MTQQ broker if not on Windows platform
Mqtt.host = host.docker.internal
Mqtt.port = 1883

[metadata-postgres]
config_file = ../metadata/metadata-docker/postgres.env

; IP address of the host running the postgres metadata container if not on Windows
POSTGRES_HOST = host.docker.internal

[metadata-metadata-msg]
config_file = ../metadata/metadata-docker/metadata-msg.env

;url (in the form tcp://123.234.345.456:1883 of the host running the MQTT broker if not on Windows
MQTT_BROKER_URL = tcp://host.docker.internal:1883

[metadata-metadata-web]
config_file = ../metadata/metadata-web/metadata-web.env

;these urls are used by the dashboard to get various information. On Windows they can be localhost
; on linux they should be the IP of the machine that is running the metadata container and the elastic search container 
METADATA_APP_URL = http://localhost:8080
METADATA_MSG_URL = http://localhost:8081
ELASTICSEARCH_URL = http://localhost:9200
;MITM_URL = http://localhost:8082
MQTT_HOST = localhost

