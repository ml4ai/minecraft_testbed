# -*- coding: utf-8 -*-
"""
.. module:: asr_message
   :platform: Linux, Windows, OSX
   :synopsis: Message class encapsulating ASR Messages

.. moduleauthor:: Dana Hughes <danahugh@andrew.cmu.edu>

Definition of a class encapsulating ASR messages.
"""

import json
import uuid

from .message_exceptions import (
    MalformedMessageCreationException, 
    MissingMessageArgumentException, 
    ImmutableAttributeException
)
from .base_message import BaseMessage


class ASR_Alternative:
    """
    A simple wrapper class for alternative transcriptions.  This class does not
    define a message itself; rather, instances of ASR_Alternative are used by
    ASR_Messages to represent alternative transcriptions.

    Attributes
    ----------
    text : string
        Text of the alternative transcription
    confidence : float
        Confidence in the transcription
    """

    def __init__(self, text, confidence):

        self._text = text
        self._confidence = confidence


    def __str__(self):
        """
        String representation of the alternative.

        Returns
        -------
        string
            Class name of the alternative, plus the text
        """

        return self.__class__.__name__ + '(' + self._text + ')'


    @property
    def text(self):
        """
        Get the text of the alternative transcription.

        Attempting to set `text` raises an `ImmutableAttributeException`.
        """

        return self._text

    @text.setter
    def text(self, text):
        raise ImmutableAttributeException(str(self), "text") from None


    @property
    def confidence(self):
        """
        Get the confidence of the alternative transcription.

        Attempting to set `confidence` raises an `ImmutableAttributeException`.
        """

        return self._confidence


    @confidence.setter
    def confidence(self, value):
        raise ImmutableAttributeException(str(self), "confidence") from None


    def toDict(self):
        """
        Generate a dictionary representation of the alternative transcription.

        Returns
        -------
        dict
            A dictionary representation of the ASR Alternative
        """

        return { 'text': self.text,
                 'confidence': self.confidence } 


    

class ASR_Message(BaseMessage):
    """
    A class encapsulating ASR messages.


    Attributes
    ----------
    text : string
        The transcription returned from the ASR system
    alternatives : list [ASR_Alternative], default=[]
        List of alternative transcriptions
    is_final : boolean
        Indicates whether the transcription is intermediate or final
    asr_system : string
        The system used to generate the transcription
    id : string, optional
        A UUID associated with the transcription, autogenerated if not provided
    participant_id : string
        The participant id the transcription was generated from
    """


    def __init__(self, **kwargs):

        BaseMessage.__init__(self, **kwargs)

        # Check to see if the necessary arguments have been passed, raise an 
        # exception if one is missing
        for arg_name in ['text', 'is_final', 'asr_system', 'participant_id']:
            if not arg_name in kwargs:
                raise MissingMessageArgumentException(str(self), 
                                                      arg_name) from None

        self._text = kwargs['text']
        self._is_final = kwargs['is_final']
        self._asr_system = kwargs['asr_system']
        self._participant_id = kwargs['participant_id']
        self._alternatives = kwargs.get('alternatives', [])
        self._id = kwargs.get('id', str(uuid.uuid4()))

        self._finalized = False


    def __str__(self):
        """
        String representation of the message.

        Returns
        -------
        string
            Class name of the message (i.e., 'BeepEvent')
        """

        return self.__class__.__name__


    def add(self, alternative):
        """
        Add an alternative transcription to the the ASR message

        Parameters
        ----------
        alternative : ASR_Alternative
            Alternative transcription to add
        """


        # Check if the victims list is finalized. If so, raise an exception
        if self._finalized:
            raise ImmutableAttributeException(str(self), "alternatives (from add)")

        self._alternatives.append(alternative)


    def finalize(self):
        """
        Indicate that all alternatives have been added to the ASR message
        """

        self._finalized = True


    @property
    def text(self):
        """
        Get the text of the transcription.

        Attempting to set `text` raises an `ImmutableAttributeException`.
        """

        return self._text

    @text.setter
    def text(self, text):
        raise ImmutableAttributeException(str(self), "text")


    @property
    def is_final(self):
        """
        Get whether the transciption is intermediate or final

        Attempting to set `is_final` raises an `ImmutableAttributeException`.
        """

        return self._is_final

    @is_final.setter
    def is_final(self, final):
        raise ImmutableAttributeException(str(self), "is_final")


    @property
    def asr_system(self):
        """
        Get the ASR system used to generate the transcription.

        Attempting to set `asr_system` raises an `ImmutableAttributeException`.
        """

        return self._asr_system

    @asr_system.setter
    def asr_system(self, system):
        raise ImmutableAttributeException(str(self), "asr_system")


    @property
    def participant_id(self):
        """
        Get the id of the participant that produced the transcription.

        Attempting to set `participant_id` raises an `ImmutableAttributeException`.
        """

        return self._participant_id

    @participant_id.setter
    def participant_id(self, id):
        raise ImmutableAttributeException(str(self), "participant_id")


    @property
    def alternatives(self):
        """
        Get the list of alternative transcriptions.

        Attempting to set `alternatives` raises an `ImmutableAttributeException`.
        """

        return self._alternatives

    @alternatives.setter
    def alternatives(self, alternatives):
        raise ImmutableAttributeException(str(self), "alternatives")


    @property
    def id(self):
        """
        UUID of the transcription
        """

        return self._id

    @id.setter
    def id(self, id):
        raise ImmutableAttributeException(str(self), "id")


    def toDict(self):
        """
        Generates a dictionary representation of the message.  Message
        information is contained in a dictionary under the key "data".
        Additional named headers may also be present.

        Returns
        -------
        dict
            A dictionary representation of the ASR_Message.
        """

        jsonDict = BaseMessage.toDict(self)

        # Check to see if a "data" is in the dictionary, and add if not
        # Note that headers should have been added in jsonDict, as well as
        # common message data.
        if not "data" in jsonDict:
            jsonDict["data"] = {}

        # Add the message data
        jsonDict["data"]["text"] = self.text
        jsonDict["data"]["is_final"] = self.is_final
        jsonDict["data"]["asr_system"] = self.asr_system
        jsonDict["data"]["participant_id"] = self.participant_id
        jsonDict["data"]["id"] = self.id
        jsonDict["data"]["alternatives"] = [ alternative.toDict() for alternative in self.alternatives ]

        return jsonDict        


    def toJson(self):
        """
        Generates a JSON representation of the message.  Message information is
        contained in a JSON object under the key "data".  Additional named
        headers may also be present.

        Returns
        -------
        string
            A JSON string mapping header names to a JSON representation of the
            ASR message.
        """

        return json.dumps(self.toDict())