# -*- coding: utf-8 -*-
"""
.. module:: woof_event
   :platform: Linux, Windows, OSX
   :synopsis: Message class encapsulating Woof Events

.. moduleauthor:: Dana Hughes <danahugh@andrew.cmu.edu>

Definition of a class encapsulating Woof Event messages.
"""

import json

from .message_exceptions import (
    MalformedMessageCreationException, 
    MissingMessageArgumentException, 
    ImmutableAttributeException
)
from .base_message import BaseMessage

class WoofEvent(BaseMessage):
    """
    A class encapsulating Woof Event messages.

    Note
    ----
    Constructing a WoofEvent message requires passing the following keyword
    arguments:

        `sourceEntity`
        `message`
        `location`

    While aliases exist for these attributes, they are currently not accepted
    as constructor parameters.

    Attributes
    ----------
    sourceEntity : string
        The name of the entity triggering the woof event
    source_entity : string
        An alias for `sourceEntity`
    message : string
        The message emitted by the source entity
    location : tuple of floats
        The (x,y,z) of the location of the entity
    woof_x : float
        The x location of the entity, alias of location[0]
    woof_y : float
        The y location of the entity, alias of location[1]
    woof_z : float
        The z location of the entity, alias of location[2]
    """


    def __init__(self, **kwargs):
        """
        WoofEvent messages are constructed from the listed keyword arguments.
        Multiple keywords can be used to define the message attributes; 
        keywords are listed in the order that they are checked

        Keyword Arguments
        -----------------
        source_entity : string
        sourceEntity : string
            Name of the entity triggering the beep
        message : string
            Message emitted by the source entity
        location : tuple of floats
        woof_x : float
        woof_y : float
        woof_z : float
            Location (x,y,z) of the entity.  If `location` is not provided,
            uses (`beep_x`, `beep_y`, `beep_z`)
        """

        BaseMessage.__init__(self, **kwargs)


        # Get the location of the entity: try `location` first, followed by
        # `woof_x`, `woof_y`, `woof_z`
        location = kwargs.get('location', None)

        if location is None:
            try:
                location = (kwargs['woof_x'], 
                            kwargs['woof_y'], 
                            kwargs['woof_z'])
            except KeyError:
                raise MissingMessageArgumentException(str(self),
                                                      'location') from None

        # Location needs to be able to be coerced into a tuple of floats.  Raise 
        # an exception if not possible
        try:
            self._location = tuple([float(x) for x in location][:3])
        except:
            raise MalformedMessageCreationException(str(self), 'location', 
                                                    location) from None

        # Get the source entity; raise an exception if not present
        self._sourceEntity = kwargs.get('source_entity', 
                             kwargs.get('sourceEntity', None))
        if self._sourceEntity is None:
            raise MissingMessageArgumentException(str(self), 
                                                  'source_entity') from None

        # Get the message; raise an exception if not present
        try:
            self._message = kwargs['message']
        except KeyError:
            raise MissingMessageArgumentException(str(self), 
                                                  'message') from None


    def __str__(self):
        """
        String representation of the message.

        Returns
        -------
        string
            Class name of the message (i.e., 'WoofEvent')
        """

        return self.__class__.__name__


    @property
    def sourceEntity(self):
        """
        Get the name of the entity that produced the woof message.  Attempting 
        to set the value of the `sourceEntity` will result in an 
        `ImmutableAttributeException` being raised.        
        """

        return self._sourceEntity

    @sourceEntity.setter
    def sourceEntity(self, entity):
        raise ImmutableAttributeException(str(self), "sourceEntity") from None


    @property
    def source_entity(self):
        """
        Alias for `sourceEntity`.
        """
        return self._sourceEntity

    @source_entity.setter
    def source_entity(self, entity):
        raise ImmutableAttributeException(str(self), "source_entity") from None


    @property
    def message(self):
        """
        Get the message generated by the entity.  Attempting to set the
        value of `message` will result in an `ImmutableAttributeException`
        being raised.
        """

        return self._message

    @message.setter
    def message(self, message):
        raise ImmutableAttributeException(str(self), "message") from None


    @property
    def location(self):
        """
        Get the location of the entity when the woof message was generated.
        Attempting to set the value of `location` will result in an
        `ImmutableAttributeException` being raised.
        """

        return self._location

    @location.setter
    def location(self, location):
        raise ImmutableAttributeException(str(self), "location") from None


    @property
    def woof_x(self):
        """
        Get the x-value of the location of the entity when the woof message was
        generated (i.e., `location[0]`).  Attempting to set the x-value of the
        location will result in an `ImmutableAttributeException` being raised.
        """

        return self._location[0]

    @woof_x.setter
    def woof_x(self, x):
        raise ImmutableAttributeException(str(self), "woof_x") from None
    

    @property
    def woof_y(self):
        """
        Get the y-value of the location of the entity when the woof message was
        generated (i.e., `location[1]`).  Attempting to set the y-value of the
        location will result in an `ImmutableAttributeException` being raised.
        """

        return self._location[1]

    @woof_y.setter
    def woof_y(self, y):
        raise ImmutableAttributeException(str(self), "woof_y") from None


    @property
    def woof_z(self):
        """
        Get the z-value of the location of the entity when the woof message was
        generated (i.e., `location[2]`).  Attempting to set the z-value of the
        location will result in an `ImmutableAttributeException` being raised.
        """

        return self._location[2]

    @woof_z.setter
    def woof_z(self, z):
        raise ImmutableAttributeException(str(self), "woof_z") from None



    def toDict(self):
        """
        Generates a dictionary representation of the WoofEvent message.  
        WoofEvent information is contained in a dictionary under the key "data".
        Additional named headers may also be present.

        Returns
        -------
        dict
            A dictionary representation of the WoofEvent.
        """

        jsonDict = BaseMessage.toDict(self)

        # Check to see if a "data" is in the dictionary, and add if not
        # Note that headers should have been added in jsonDict, as well as
        # common message data.
        if not "data" in jsonDict:
            jsonDict["data"] = {}

        # Add the beep event data
        jsonDict["data"]["source_entity"] = self.sourceEntity
        jsonDict["data"]["message"] = self.message
        jsonDict["data"]["woof_x"] = self.woof_x
        jsonDict["data"]["woof_y"] = self.woof_y
        jsonDict["data"]["woof_z"] = self.woof_z

        return jsonDict


    def toJson(self):
        """
        Generates a JSON representation of the WoofEvent message.  WoofEvent
        information is contained in a JSON object under the key "data".
        Additional named headers may also be present.

        Returns
        -------
        string
            A JSON string mapping header names to a JSON representation of the
            WoofEvent message.
        """

        return json.dumps(self.toDict())
