# -*- coding: utf-8 -*-
"""
.. module:: headers
   :platform: Linux, Windows, OSX
   :synopsis: Classes for Message Headers

.. moduleauthor:: Dana Hughes <danahugh@andrew.cmu.edu>

The set of classes encapsulating message headers received from  Minecraft.
Note that not all headers are generated by all bridges, and that some 
attributes of generated headers may not be present if not available by the
bridge used.
"""

import json
from datetime import datetime

# NOTE: I'm not certain the best way to make this bit flexible...
TESTBED_VERSION = 0.5

class BusHeader:
    """
    A lightweight wrapper of a bus header.  Bus headers contain information
    regarding transmission of messages through a communication channel:

    timestamp    - Timestamp of the message publication (ISO8601 format)
    message_type - Type of message
    version      - Version of the message

    BusHeaders are used by the MQTT bus with the ASIST Testbed.  See the message 
    specifications in the testbed for details.

    TODO:  Implement header validation
    """


    def __init__(self, message_type, timestamp=None, version=TESTBED_VERSION):
        """
        Create a new header instance
        """

        self.message_type = message_type
        if timestamp is not None:
            self.timestamp = timestamp
        else:
            self.timestamp = datetime.utcnow()
        self.version = version


    def toDict(self):
        """
        Convert the BusHeader to a Python dictionary whose key / value pairs 
        match those of the testbed message format
        """

        jsonDict =  { 'message_type': self.message_type.value,
                      'version':      str(self.version),
                      'timestamp':    str(self.timestamp.isoformat()) + "Z"
                    }

        return jsonDict


    def toJson(self):
        """
        Create a JSON representation of this header, by converting attributes
        to their corresponding string representations.
        """

        return json.dumps(self.toDict())



class MessageHeader:
    """
    A lightweight wrapper of a message header.  Message headers contain common
    information about the generation of the message:

    timestamp            - Timestamp of the creation of the data (ISO8601)
    experiment_id        - String identifier of an experiment
    trial_id             - String identifier of an experiment trial
    replay_id (optional) - UUID of a replay of original trial, if replayed
    source               - name of testbed component that generated the data
    sub_type             - Subtype of the data
    version              - Version of the subtype

    See the message specifications in the testbed

    TODO:  Implement message validation
    """


    def __init__(self, sub_type, experiment_id, trial_id, source, timestamp=None, 
                       version=TESTBED_VERSION, replay_id=None):
        """
        Create a new message header instance.

        Args:
            sub_type - subtype of the message, instance of the 
                       MessageSubtype enumeration
            experiment_id - string UUID of the experiment
            trial_id      - string UUID of the trial
            source        - string name of the component that generated message
            timestamp     - timestamp (instance of datetime) of data generation
            version       - version of the message
            replay_id     - string UUID of the replay (optional)
        """

        self.sub_type = sub_type
        self.experiment_id = experiment_id
        self.trial_id = trial_id
        self.replay_id = replay_id
        self.source = source
        if timestamp is not None:
            self.timestamp = timestamp
        else:
            self.timestamp = datetime.utcnow()
        self.version = version


    def toDict(self):
        """
        Convert the MessageHeader to a Python dictionary whose key / value pairs 
        match those of the testbed message format
        """

        jsonDict = { 'sub_type':      self.sub_type.value,
                     'experiment_id': self.experiment_id,
                     'trial_id':      self.trial_id,
                     'source':        self.source,
                     'version':       str(self.version),
                     'timestamp':     str(self.timestamp.isoformat()) + "Z"
                   }

        if self.replay_id is not None:
            jsonDict['replay_id'] = self.replay_id

        return jsonDict


    def toJson(self):
        """
        Create a JSON representation of this header, by converting attributes
        to their corresponding string representations.
        """

        return json.dumps(self.toDict())