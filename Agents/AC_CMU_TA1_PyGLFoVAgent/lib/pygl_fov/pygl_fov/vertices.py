"""
vertices.py

This file contains a list of functions used to get the vertices for different
block types, to be used by the FOV to generate the image using a VBO.

Each rendering function takes as argument a block and color as argument.  Blocks
are instances of Blocks, and colors are RGB tuples.

The vertices generated by the functions assume that the geometry being rendered
is a GL_QUAD, i.e., four vertices define a single face.

Block dimensions were estimated based on information from the following sites:
https://minecraft.gamepedia.com/Solid_block
https://docs.google.com/spreadsheets/d/18_m_ylcYiE_gmxKCBgpu-qkj767kfn_T88hS4GdTqh0
"""

from OpenGL import GL

import MinecraftElements


def getUnknownVertices(block):
	"""
	Placeholder for blocks which vertices have not been defined.  Returns None

	Args:
		block - unused
	"""

	return None


def getVerticesEmpty(block):
	"""
	Generates no vertices.  Useful for, e.g., air blocks.

	Args:
		block - unused
	"""

	return []


def getCuboidVertices(lower_corner, upper_corner):
	"""
	Helper function to get vertices of a cuboid defined by two corners.  
	
	Args:
		lower_corner - The corner of the cuboid defined by (x_min, y_min, z_min)
		upper_corner - The corner of the cuboid defined by (x_max, y_max, z_max)
	"""

	# Unpack the corners
	x_min, y_min, z_min = lower_corner
	x_max, y_max, z_max = upper_corner

	vertices = []
	# Populate the vertices for each of the quads of the cuboid

	# Top Face
	vertices += [ x_max, y_max, z_min, 
	              x_min, y_max, z_min,
	              x_min, y_max, z_max,
	              x_max, y_max, z_max 
	            ]

	# Bottom Face
	vertices += [ x_max, y_min, z_max,
	              x_min, y_min, z_max,
	              x_min, y_min, z_min,
	              x_max, y_min, z_min
	            ]

	# South Face
	vertices += [ x_max, y_max, z_max,
	              x_min, y_max, z_max,
	              x_min, y_min, z_max,
	              x_max, y_min, z_max
	            ]

	# North Face
	vertices += [ x_max, y_min, z_min,
                  x_min, y_min, z_min,
                  x_min, y_max, z_min,
                  x_max, y_max, z_min
	            ]

	# West Face
	vertices += [ x_min, y_max, z_max,
	              x_min, y_max, z_min,
	              x_min, y_min, z_min,
	              x_min, y_min, z_max
	            ]

	# East Face
	vertices += [ x_max, y_max, z_min,
	              x_max, y_max, z_max,
	              x_max, y_min, z_max,
	              x_max, y_min, z_min
	            ]

	return vertices



def getVerticesBoundingBox(block):
	"""
	Get vertices for a bounding box.  The bounding box consists of thin cuboids
	at each edge of a unit block at the block's location.

	Args:
		block - an instance of Block
	"""

	# What is the position of the block and rgb values?
	x,y,z = block.location

	vertices =  getCuboidVertices((x,      y,      z),      (x+1.0,  y+0.01, z+0.01))
	vertices += getCuboidVertices((x,      y,      z),      (x+0.01, y+1.0,  z+0.01))
	vertices += getCuboidVertices((x,      y,      z),      (x+0.01, y+0.01, z+1.0))
	vertices += getCuboidVertices((x+0.99, y,      z),      (x+1.0,  y+1.0,  z+0.01))
	vertices += getCuboidVertices((x+0.99, y,      z),      (x+1.0,  y+0.01, z+1.0))
	vertices += getCuboidVertices((x,      y+0.99, z),      (x+1.0,  y+1.0,  z+0.01))
	vertices += getCuboidVertices((x,      y+0.99, z),      (x+0.01, y+1.0,  z+1.0))
	vertices += getCuboidVertices((x,      y,      z+0.99), (x+1.0,  y,      z+1.0))
	vertices += getCuboidVertices((x,      y,      z+0.99), (x+0.01, y+1.0,  z+1.0))
	vertices += getCuboidVertices((x+0.99, y+0.99, z),      (x+1.0,  y+1.0,  z+1.0))
	vertices += getCuboidVertices((x+0.99, y,      z+0.99), (x+1.0,  y+1.0,  z+1.0))
	vertices += getCuboidVertices((x,      y+0.99, z+0.99), (x+1.0,  y+1.0,  z+1.0))

	return vertices


def getVerticesUnitBlock(block):
	"""
	Get vertices for a unit block.  Unit blocks are 1x1x1 cubes, and do not 
	have any change in appearance based on facing, orientation, or variants.

	Args:
		block - an instance of Block
	"""

	# What is the position of the block and rgb values?
	x,y,z = block.location

	vertices = getCuboidVertices((x, y, z), (x+1.0, y+1.0, z+1.0))

	return vertices


def getVerticesWater(block):
	"""
	Get vertices for a water block.  Water blocks are 1x0.875x1 cubes, and do 
	not have any change in appearance based on facing, orientation, or variants.

	NOTE: Water is also translucent, but currently not sure how to tackle that.

	NOTE: Water is actually going to be a unit block if its velocity is high
	      enough

	block - an instance of Block with type "water"
	"""

	# What is the position of the block and rgb values?
	x,y,z = block.location

	vertices = getCuboidVertices((x, y, z), (x+1.0, y+0.875, z+1.0))

	return vertices


def getVerticesEndPortalFrame(block):
	"""
	Get vertices for an end portal frame, which is a 1 x 13/16 x 1 cube.  
	Technically, these blocks have a facing and eye attributes, but neither
	are used in the current version of the renderer.

	block - an instance of Block
	"""

	# What is the position of the block and rgb values?
	x,y,z = block.location

	vertices = getCuboidVertices((x,       y,          z), 
		                         (x + 1.0, y + 0.8125, z + 1.0))

	return vertices


def getVerticesCauldron(block):
	"""
	Render a cauldron.  Cauldrons are 1 x 3/4 x 1 cubes, sitting on top of four 
	1/4 x 1/4 x 1/4 legs, and do not have any change in appearance based on 
	facing, orientation, or variance.

	block - an instance of Block
	"""

	# What is the position of the block and rgb values?
	x,y,z = block.location

	# Draw the top portion of the cauldron
	vertices = getCuboidVertices((x, y+0.25, z), (x+1.0, y+1.0, z+1.0))

	# Draw the four legs
	for dx in [0, 0.75]:
		for dz in [0, 0.75]:
			vertices += getCuboidVertices((x+dx,      y,      z+dz), 
				                          (x+dx+0.25, y+0.25, z+dz+0.25))

	return vertices



def getVerticesPressurePlate(block):
	"""
	Render a pressure plate.  Pressure plates are 7/8 x 1/16 x 7/8 blocks, and
	do not have any change in appearance based on facing, orientation, or
	variance.

	block - an instance of Block
	"""

	# What is the position of the block and rgb values?
	x,y,z = block.location

	vertices = getCuboidVertices((x + 0.0625, y,          z + 0.0625), 
		                         (x + 0.9375, y + 0.0625, z + 0.9375))

	return vertices



def getVerticesFlowerPot(block):
	"""
	Render a flower pot.  Flower pots are 3/8 x 3/8 x 3/8, and do not have any
	change in appearance based on facing, orientation, or variance.  Note that
	rendering does not include the contents (e.g., flower) of the pot.

	block - an instance of Block
	"""

	# What is the position of the block and rgb values?
	x,y,z = block.location

	vertices = getCuboidVertices((x + 0.3125, y,         z + 0.3125), 
		                         (x + 0.6875, y + 0.375, z + 0.6875))

	return vertices


def getVerticesWallSign(block):
	"""
	Render a wall sign.  Wall signs are 1 x 1/2 x 1/8, and are positioned based
	on their facing.

	block - an instance of Block
	"""

	# The block must have a facing.  If not present, don't render 
	if block.facing is None:
		print(f'[renderWallSign] - WARNING: block.facing is None.  Returning no vertices.')
		return None

	# What is the position of the block and rgb values?
	x,y,z = block.location

	# Bounds of the sign are based on the facing
	if block.facing == MinecraftElements.Facing.SOUTH:
		lower_corner = (x,       y + 0.25, z)
		upper_corner = (x + 1.0, y + 0.75, z + 0.125)
	elif block.facing == MinecraftElements.Facing.NORTH:
		lower_corner = (x,       y + 0.25, z + 0.875)
		upper_corner = (x + 1.0, y + 0.75, z + 1.0)
	elif block.facing == MinecraftElements.Facing.EAST:
		lower_corner = (x,         y + 0.25, z)
		upper_corner = (x + 0.125, y + 0.75, z + 1.0)
	elif block.facing == MinecraftElements.Facing.WEST:
		lower_corner = (x + 0.875, y + 0.25, z)
		upper_corner = (x + 1.0,   y + 0.75, z + 1.0)
	else:
		lower_corner = (x,       y + 0.25, z)
		upper_corner = (x + 1.0, y + 0.75, z + 1.0)

	vertices = getCuboidVertices(lower_corner, upper_corner)

	return vertices


def getVerticesLever(block):
	"""
	Render a lever.  Levers consist of a 3/8 x 1/2 x 3/16 base, and a 
	1/8 x 1/8 x 1/2 lever.  Base and lever are positioned based on the facing;
	levers are additionally modified by wheter they are powered.

	block - an instance of Block
	"""

	# The block must have a facing and powered attribute.  If not present,
	# don't render 
	if block.facing is None:
		print(f'[renderLever] - WARNING: block.facing is None.  Returning no vertices.')
		return None
	if block.powered is None:
		print(f'[renderLever] - WARNING: block.powered is None.  Returning no vertices.')
		return None


	# What is the position of the block and rgb values?
	x,y,z = block.location

	# Bounds of the sign are based on the facing
	if block.facing == MinecraftElements.Facing.SOUTH:
		lower_corner = (x + 0.3125, y + 0.25, z)
		upper_corner = (x + 0.6875, y + 0.75, z + 0.1875)
	elif block.facing == MinecraftElements.Facing.NORTH:
		lower_corner = (x + 0.3125, y + 0.25, z + 0.8125)
		upper_corner = (x + 0.6875, y + 0.75, z + 1.0)
	elif block.facing == MinecraftElements.Facing.EAST:
		lower_corner = (x,          y + 0.25, z + 0.3125)
		upper_corner = (x + 0.1875, y + 0.75, z + 0.6875)
	elif block.facing == MinecraftElements.Facing.WEST:
		lower_corner = (x + 0.8125, y + 0.25, z + 0.3125)
		upper_corner = (x + 1.0,    y + 0.75, z + 0.6875)
	else:
		lower_corner = (x,       y + 0.25, z)
		upper_corner = (x + 1.0, y + 0.75, z + 1.0)

	vertices = getCuboidVertices(lower_corner, upper_corner)

	return vertices


def getVerticesTripwireHook(block):
	"""
	Render a tripwire hook.  Tripwire hooks consist of a 1/4 x 1/2 x 1/8 base, 
	a 1/8 x 1/8 x 5/16 arm, and a ???? hook.  The tripwire hook's position is
	modified by facing, and whether it's attached.

	block - an instance of Block
	"""

	# The block must have a facing, powered, and attached attributes.  If not 
	# present, don't render 
	if block.facing is None:
		print(f'[renderTripwireHook] - WARNING: block.facing is None.  Returning no vertices.')
		return None

	if block.powered is None:
		print(f'[renderTripwireHook] - WARNING: block.powered is None.  Returning no vertices.')
		return None

	if block.attached is None:
		print(f'[renderTripwireHook] - WARNING: block.attached is None.  Returning no vertices.')
		return None

	# What is the position of the block and rgb values?
	x,y,z = block.location

	# Bounds of the sign are based on the facing
	if block.facing == MinecraftElements.Facing.SOUTH:
		lower_corner = (x + 0.375, y + 0.0625, z)
		upper_corner = (x + 0.625, y + 0.5625, z + 0.125)
	elif block.facing == MinecraftElements.Facing.NORTH:
		lower_corner = (x + 0.375, y + 0.0625, z + 0.875)
		upper_corner = (x + 0.625, y + 0.5625, z + 1.0)
	elif block.facing == MinecraftElements.Facing.EAST:
		lower_corner = (x,         y + 0.0625, z + 0.375)
		upper_corner = (x + 0.125, y + 0.5625, z + 0.625)
	elif block.facing == MinecraftElements.Facing.WEST:
		lower_corner = (x + 0.875, y + 0.0625, z + 0.375)
		upper_corner = (x + 1.0,   y + 0.5625, z + 0.625)
	else:
		lower_corner = (x,       y + 0.0625, z)
		upper_corner = (x + 1.0, y + 0.5625, z + 1.0)

	vertices = getCuboidVertices(lower_corner, upper_corner)

	return vertices


def getVerticesChest(block):
	"""
	Render a chest.  Chests are somewhat smaller in all dimensions from a unit
	block, and can be opened and closed.  Chests sizes are assumed to be 0.9375
	on a side, and 0.875 in height, and the bottoms of chests are "grounded".

	Currently, rendering the chest is limited to the chest in the closed state.

	block - an instance of Block of type chest
	"""

	# What is the position of the chest and rgb values?
	x,y,z = block.location

	vertices = getCuboidVertices((x + 0.0625, y,         z + 0.0625), 
		                         (x + 0.9375, y + 0.875, z + 0.9375))

	return vertices


def getVerticesSlab(block):
	"""
	Render a slab.  Slabs are half of the height of a normal block.  The half
	to render is indicated by the half attribute of the block.

	block - an instance of Block of type slab
	"""

	# Only attempt to render if the block has a half attribute
	if block.half is None:
		print(f'[renderSlab] - WARNING: block.half is None.  Returning no vertices.')
		return None

	# What is the position of the chest and rgb values?
	x,y,z = block.location


	if block.half == MinecraftElements.Half.top:
		vertices = getCuboidVertices((x,       y + 0.5, z), 
			                         (x + 1.0, y + 1.0, z+1.0))
	else:
		vertices = getCuboidVertices((x,       y,       z), 
			                         (x + 1.0, y + 0.5, z+1.0))

	return vertices


def getVerticesHopper(block):
	"""
	Render a hopper.  Hoppers consist of three blocks that taper downward; the
	bottom block can be oriented in different ways based on facing.

	block - an instance of Block of type hopper
	"""

	# Only attempt to render if the block has a facing attribute
	if block.facing is None:
		print(f'[renderHopper] - WARNING: block.facing is None.  Returning no vertices.')
		return None

	# What is the position of the chest and rgb values?
	x,y,z = block.location


	# Draw the top part of the hopper
	vertices = getCuboidVertices((x,       y + 0.625, z), 
		                         (x + 1.0, y + 1.0,   z+1.0))
	
	# Draw the middle part of the hopper
	vertices += getCuboidVertices((x + 0.25, y + 0.25,  z + 0.25), 
		                          (x + 0.75, y + 0.625, z + 0.75))	

	# Draw the bottom part of the hopper
	if block.facing == MinecraftElements.Facing.DOWN:
		vertices += getCuboidVertices((x + 0.375, y,        z + 0.375), 
		                              (x + 0.625, y + 0.25, z + 0.625))		

	# TODO: FIgure out the other facings

	return vertices


def getVerticesAnvil(block):
	"""
	Render an anvil.  

	block - an instance of Block of type hopper
	"""

	# Only attempt to render if the block has a facing attribute
	if block.facing is None:
		print(f'[renderAnvil] - WARNING: block.facing is None.  Returning no vertices.')
		return None

	# What is the position of the chest and rgb values?
	x,y,z = block.location


	if block.facing == MinecraftElements.Facing.NORTH or block.facing == MinecraftElements.Facing.SOUTH:
		vertices = getCuboidVertices((x,       y + 0.625, z + 0.1875), 
			                         (x + 1.0, y + 1.0,   z + 0.8125))
		vertices += getCuboidVertices((x + 0.25, y + 0.3125, z + 0.375), 
			                          (x + 0.75, y + 0.625,  z + 0.625))
		vertices += getCuboidVertices((x + 0.1875, y + 0.25,   z + 0.25), 
			                          (x + 1.0,    y + 0.3125, z + 0.8125))
		vertices += getCuboidVertices((x + 0.125, y,        z + 0.125), 
			                          (x + 0.875, y + 0.25, z + 0.875))

	elif block.facing == MinecraftElements.Facing.EAST or block.facing == MinecraftElements.Facing.WEST:
		vertices = getCuboidVertices((x + 0.1875, y + 0.625, z), 
			                         (x + 0.8125, y + 1.0,   z + 1.0))
		vertices += getCuboidVertices((x + 0.375, y + 0.3125, z + 0.25), 
			                          (x + 0.625, y + 0.625,  z + 0.75))
		vertices += getCuboidVertices((x + 0.25,   y + 0.25,   z + 0.1875), 
			                          (x + 0.8125, y + 0.3125, z + 1.0))
		vertices += getCuboidVertices((x + 0.125, y,        z + 0.125), 
			                          (x + 0.875, y + 0.25, z + 0.875))

	# If some other facing is given, raise a warning
	else:
		print(f'[renderAnvil] - WARNING: Invalid block.facing: {block.facing}.  Returning no vertices.')
		return None

	return vertices


def getVerticesButton(block):
	"""
	Render abutton.  

	block - an instance of Block of type hopper
	"""

	# Only attempt to render if the block has a facing attribute
	if block.facing is None:
		print(f'[renderButton] - WARNING: block.facing is None.  Returning no vertices.')
		return None
	if block.powered is None:
		print(f'[renderButton] - WARNING: block.powered is None.  Returning no vertices.')
		return None

	# What is the position of the chest and rgb values?
	x,y,z = block.location

	# Button is depressed if powered
	depth = 0.0625 if block.powered else 0.125

	if block.facing == MinecraftElements.Facing.UP:
		vertices = getCuboidVertices((x + 0.3125, y,         z + 0.375), 
			                         (x + 0.6875, y + depth, z + 0.625))
	elif block.facing == MinecraftElements.Facing.DOWN:
		vertices = getCuboidVertices((x + 0.3125, y + 1.0 - depth, z + 0.375), 
			                         (x + 0.6875, y + 1.0,         z + 0.625))
	elif block.facing == MinecraftElements.Facing.NORTH:
		vertices = getCuboidVertices((x + 0.3125, y + 0.375, z + 1.0 - depth), 
			                         (x + 0.6875, y + 0.625, z + 1.0))
	elif block.facing == MinecraftElements.Facing.SOUTH:
		vertices = getCuboidVertices((x + 0.3125, y + 0.375, z), 
			                         (x + 0.6875, y + 0.625, z + depth))
	elif block.facing == MinecraftElements.Facing.WEST:
		vertices = getCuboidVertices((x + 1.0 - depth, y + 0.375, z + 0.3125), 
			                         (x + 1.0,         y + 0.625, z + 0.6875))
	elif block.facing == MinecraftElements.Facing.EAST:
		vertices = getCuboidVertices((x,         y + 0.375, z + 0.3125), 
			                         (x + depth, y + 0.625, z + 0.6875))
	else:
		print(f'[renderButton] - WARNING: Invalid block.facing: {block.facing}.  Returning no vertices.')
		return None


	return vertices


def getVerticesGlassPane(block):
	"""
	Render a glass pane.  

	block - an instance of Block of type hopper
	"""

	# What is the position of the chest and rgb values?
	x,y,z = block.location

	# Draw the center portion
	vertices = getCuboidVertices((x + 0.4375, y,       z + 0.4375), 
		                         (x + 0.5625, y + 1.0, z + 0.5625))

	# Draw the pane in each direction present
	if block.north:
		vertices += getCuboidVertices((x + 0.4375, y,       z), 
		                              (x + 0.5625, y + 1.0, z + 0.5625))
	if block.south:
		vertices += getCuboidVertices((x + 0.4375, y,       z + 0.5625), 
		                              (x + 0.5625, y + 1.0, z + 1.0))
	if block.east:
		vertices += getCuboidVertices((x + 0.5625, y,       z + 0.4375), 
		                              (x + 1.0,    y + 1.0, z + 0.5625))
	if block.west:
		vertices += getCuboidVertices((x,          y,       z + 0.4375), 
		                              (x + 0.4375, y + 1.0, z + 0.5625))

	return vertices


def getVerticesLadder(block):
	"""
	Render a ladder.  Ladders appear to be flat entities slightly offset from
	the wall they're attached to.  Face dimensions can be easily inferred, but
	the offset is difficult, so used a rough estimate

	block - an instance of Block of type ladder
	"""

	# Only attempt to render if the block has a facing attribute
	if block.facing is None:
		print(f'[renderLadder] - WARNING: block.facing is None.  Returning no vertices.')
		return None

	# What is the position of the chest and rgb values?
	x,y,z = block.location


	# Draw the ladder based on its facing
	if block.facing == MinecraftElements.Facing.NORTH:
		vertices = getCuboidVertices((x + 0.125, y,       z + 0.99), 
		                             (x + 0.25,  y + 1.0, z + 1.0))
		vertices += getCuboidVertices((x + 0.75,  y,       z + 0.99), 
		                              (x + 0.875, y + 1.0, z + 1.0))
		vertices += getCuboidVertices((x + 0.0625, y + 0.0625, z + 0.99), 
		                              (x + 0.9375, y + 0.1875, z + 1.0))
		vertices += getCuboidVertices((x + 0.062,  y + 0.3125, z + 0.99), 
		                              (x + 0.9375, y + 0.4375, z + 1.0))
		vertices += getCuboidVertices((x + 0.0625, y + 0.5625, z + 0.99), 
		                              (x + 0.9375, y + 0.6875, z + 1.0))
		vertices += getCuboidVertices((x + 0.0625, y + 0.8125, z + 0.99), 
		                              (x + 0.9375, y + 0.9375, z + 1.0))
		                              		
	elif block.facing == MinecraftElements.Facing.SOUTH:
		vertices = getCuboidVertices((x + 0.125, y,       z), 
		                             (x + 0.25,  y + 1.0, z + 0.01))
		vertices += getCuboidVertices((x + 0.75,  y,       z), 
		                              (x + 0.875, y + 1.0, z + 0.01))
		vertices += getCuboidVertices((x + 0.0625, y + 0.0625, z), 
		                              (x + 0.9375, y + 0.1875, z + 0.01))		
		vertices += getCuboidVertices((x + 0.0625, y + 0.3125, z), 
		                              (x + 0.9375, y + 0.4375, z + 0.01))		
		vertices += getCuboidVertices((x + 0.0625, y + 0.5625, z), 
		                              (x + 0.9375, y + 0.6875, z + 0.01))
		vertices += getCuboidVertices((x + 0.0625, y + 0.8125, z), 
		                              (x + 0.9375, y + 0.9375, z + 0.01))

	elif block.facing == MinecraftElements.Facing.EAST:
		vertices = getCuboidVertices((x,        y,       z + 0.125), 
		                             (x + 0.01, y + 1.0, z + 0.25))
		vertices += getCuboidVertices((x,        y,       z + 0.75), 
		                              (x + 0.01, y + 1.0, z + 0.875))
		vertices += getCuboidVertices((x,        y + 0.0625, z + 0.0625), 
		                              (x + 0.01, y + 0.1875, z + 0.9375))
		vertices += getCuboidVertices((x,        y + 0.3125, z + 0.0625), 
		                              (x + 0.01, y + 0.4375, z + 0.9375))
		vertices += getCuboidVertices((x,        y + 0.5625, z + 0.0625), 
		                              (x + 0.01, y + 0.6875, z + 0.9375))
		vertices += getCuboidVertices((x,        y + 0.8125, z + 0.0625), 
		                              (x + 0.01, y + 0.9375, z + 0.9375))

	elif block.facing == MinecraftElements.Facing.WEST:
		vertices = getCuboidVertices((x + 0.99, y,       z + 0.125), 
		                             (x + 1.0,  y + 1.0, z + 0.25))
		vertices += getCuboidVertices((x + 0.99, y,       z + 0.75), 
		                              (x + 1.0,  y + 1.0, z + 0.875))
		vertices += getCuboidVertices((x + 0.99, y + 0.0625, z + 0.0625), 
		                              (x + 1.0,  y + 0.1875, z + 0.9375))
		vertices += getCuboidVertices((x + 0.99, y + 0.3125, z + 0.0625), 
		                              (x + 1.0,  y + 0.4375, z + 0.9375))
		vertices += getCuboidVertices((x + 0.99, y + 0.5625, z + 0.0625), 
		                              (x + 1.0,  y + 0.6875, z + 0.9375))
		vertices += getCuboidVertices((x + 0.99, y + 0.8125, z + 0.0625), 
		                              (x + 1.0,  y + 0.9375, z + 0.9375))

	else:
		print(f'[renderLadder] - WARNING: Invalid block.facing: {block.facing}.  Returning no vertices.')
		return None

	return vertices


def getVerticesFence(block):
	"""
	Render a fence.  

	block - an instance of Block of type hopper
	"""

	# What is the position of the chest and rgb values?
	x,y,z = block.location

	# Draw the center post
	vertices = getCuboidVertices((x + 0.375, y,       z + 0.375), 
		                         (x + 0.625, y + 1.0, z + 0.625))

	# Draw the pane in each direction present
	if block.north:
		vertices += getCuboidVertices((x + 0.4375, y + 0.375,  z), 
		                              (x + 0.5625, y + 0.5625, z + 0.4375))
		vertices += getCuboidVertices((x + 0.4375, y + 0.75,   z), 
		                              (x + 0.5625, y + 0.9375, z + 0.4375))
	if block.south:
		vertices += getCuboidVertices((x + 0.4375, y + 0.375,  z + 0.5625), 
		                              (x + 0.5625, y + 0.5625, z + 1.0))
		vertices += getCuboidVertices((x + 0.4375, y + 0.75,   z + 0.5625), 
		                              (x + 0.5625, y + 0.9375, z + 1.0))		
	if block.east:
		vertices += getCuboidVertices((x + 0.5625, y + 0.375,  z + 0.4375), 
		                              (x + 1.0,    y + 0.5625, z + 0.5625))
		vertices += getCuboidVertices((x + 0.5625, y + 0.75,   z + 0.4375), 
		                              (x + 1.0,    y + 0.9375, z + 0.5625))
	if block.west:
		vertices += getCuboidVertices((x,          y + 0.375,  z + 0.4375), 
		                              (x + 0.4375, y + 0.5625, z + 0.5625))
		vertices += getCuboidVertices((x,          y + 0.75,   z + 0.4375), 
		                              (x + 0.4375, y + 0.9375, z + 0.5625))	

	return vertices


def getVerticesFenceGate(block):
	"""
	Render a fence gate.

	NOTE:  Does not incorporate open / closed, needs to be implemented.

	block - an instance of Block of type hopper
	"""

	# Only attempt to render if the block has a facing attribute
	if block.facing is None:
		print(f'[renderFenceGate] - WARNING: block.facing is None.  Returning no vertices.')
		return None

	# What is the position of the chest and rgb values?
	x,y,z = block.location


	if block.facing == MinecraftElements.Facing.NORTH or block.facing == MinecraftElements.Facing.SOUTH:

		vertices = getCuboidVertices((x,         y + 0.3125, z + 0.4375), 
		                             (x + 0.125, y + 1.0,    z + 0.5625))
		vertices += getCuboidVertices((x + 0.875, y + 0.3125, z + 0.4375), 
		                              (x + 1.0,   y + 1.0,    z + 0.5625))
		vertices += getCuboidVertices((x + 0.125, y + 0.375,  z + 0.4375), 
		                              (x + 0.875, y + 0.5625, z + 0.5625))
		vertices += getCuboidVertices((x + 0.125, y + 0.75,   z + 0.4375), 
		                              (x + 0.875, y + 0.9375, z + 0.6525))
		vertices += getCuboidVertices((x + 0.375, y + 0.5625, z + 0.4375), 
		                              (x + 0.625, y + 0.75,   z + 0.5625))

	elif block.facing == MinecraftElements.Facing.EAST or block.facing == MinecraftElements.Facing.WEST:

		vertices = getCuboidVertices((x + 0.4375, y + 0.3125, z), 
		                             (x + 0.5625, y + 1.0,    z + 0.125))
		vertices += getCuboidVertices((x + 0.4375, y + 0.3125, z + 0.875), 
		                              (x + 0.5625, y + 1.0,    z + 1.0))
		vertices += getCuboidVertices((x + 0.4375, y + 0.375,  z + 0.125), 
		                              (x + 0.5625, y + 0.5625, z + 0.875))
		vertices += getCuboidVertices((x + 0.4375, y + 0.75,   z + 0.125), 
		                              (x + 0.5625, y + 0.9375, z + 0.875))
		vertices += getCuboidVertices((x + 0.4375, y + 0.5625, z + 0.375), 
		                              (x + 0.5625, y + 0.75,   z + 0.625))

	else:
		print(f'[renderFenceGate] - WARNING: Invalid block.facing: {block.facing}.  Returning no vertices.')
		return None

	return vertices


def getVerticesBars(block):
	"""
	Render iron bars.  

	NOTE:  Technically, the bars aren't cuboids, but rather two intersecting
	       planes.  But, close enough.

	block - an instance of Block of type iron bar
	"""

	# What is the position of the chest and rgb values?
	x,y,z = block.location

	# Draw the center post.
	vertices = getCuboidVertices((x + 0.4375, y,       z + 0.4375), 
			                     (x + 0.5625, y + 1.0, z + 0.5625))

	# Draw the pane in each direction present
	if block.north:
		vertices += getCuboidVertices((x + 0.4375, y,        z), 
			                          (x + 0.5625, y + 0.01, z + 0.4375))
		vertices += getCuboidVertices((x + 0.4375, y + 0.99, z), 
			                          (x + 0.5625, y + 1.0,  z + 0.4375))		
		vertices += getCuboidVertices((x + 0.49, y,       z + 0.125), 
			                          (x + 0.51, y + 1.0, z + 0.25))		
		vertices += getCuboidVertices((x + 0.49, y + 0.4375, z), 
			                          (x + 0.51, y + 0.5625, z + 0.125))		
		vertices += getCuboidVertices((x + 0.49, y + 0.125, z + 0.25), 
			                          (x + 0.51, y + 0.25,  z + 0.4375))
	if block.south:
		vertices += getCuboidVertices((x + 0.4375, y,        z + 0.5625), 
			                          (x + 0.5625, y + 0.01, z + 1.0))
		vertices += getCuboidVertices((x + 0.4375, y + 0.99, z + 0.5625), 
			                          (x + 0.5625, y + 1.0,  z + 1.0))		
		vertices += getCuboidVertices((x + 0.49, y,       z + 0.75), 
			                          (x + 0.51, y + 1.0, z + 0.875))		
		vertices += getCuboidVertices((x + 0.49, y + 0.4375, z + 0.875), 
			                          (x + 0.51, y + 0.5625, z + 1.0))		
		vertices += getCuboidVertices((x + 0.49, y + 0.75,  z + 0.5625), 
			                          (x + 0.51, y + 0.875, z + 0.75))
	if block.east:
		vertices += getCuboidVertices((x + 0.5625, y,        z + 0.4375), 
			                          (x + 1.0,    y + 0.01, z + 0.5625))
		vertices += getCuboidVertices((x + 0.5625, y + 0.99, z + 0.4375), 
			                          (x + 1.0,    y + 1.0,  z + 0.5625))		
		vertices += getCuboidVertices((x + 0.75,  y,       z + 0.49), 
			                          (x + 0.875, y + 1.0, z + 0.51))		
		vertices += getCuboidVertices((x + 0.875, y + 0.4375, z + 0.49), 
			                          (x + 1.0,   y + 0.5625, z + 0.51))
		vertices += getCuboidVertices((x + 0.5625, y + 0.75,  z + 0.49), 
			                          (x + 0.75,   y + 0.875, z + 0.51))
	if block.west:
		vertices += getCuboidVertices((x,          y,        z + 0.4375), 
			                          (x + 0.4375, y + 0.01, z + 0.5625))
		vertices += getCuboidVertices((x,          y + 0.99, z + 0.4375), 
			                          (x + 0.4375, y + 1.0,  z + 0.5625))		
		vertices += getCuboidVertices((x + 0.125, y,       z + 0.49), 
			                          (x + 0.25,  y + 1.0, z + 0.51))		
		vertices += getCuboidVertices((x,         y + 0.4375, z + 0.49), 
			                          (x + 0.125, y + 0.5625, z + 0.51))		
		vertices += getCuboidVertices((x + 0.25,   y + 0.125, z + 0.49), 
			                          (x + 0.4375, y + 0.25,  z + 0.51))

	return vertices



def getVerticesStairs(block):
	"""
	Render stairs.  Stair orientation is defined by half, facing, and shape.

	block - an instance of Block of type iron bar
	"""

	# Need the facing, half, and shape attributes to be present, otherwise,
	# don't render.
	if block.facing is None:
		print(f'[renderStairs] - WARNING: block.facing is None.  Returning no vertices.')
		return None
	if block.half is None:
		print(f'[renderLadder] - WARNING: block.half is None.  Returning no vertices.')
		return None
	if block.shape is None:
		print(f'[renderLadder] - WARNING: block.shape is None.  Returning no vertices.')
		return None

	# What is the position of the chest and rgb values?
	x,y,z = block.location

	# Draw the top or bottom half, depending on half
	if block.half == MinecraftElements.Half.top:
		vertices = getCuboidVertices((x,       y + 0.5, z), 
			                         (x + 1.0, y + 1.0, z + 1.0))

		if block.facing == MinecraftElements.Facing.WEST:
			if block.shape == MinecraftElements.Shape.straight:
				vertices += getCuboidVertices((x,       y,       z), 
			                		          (x + 0.5, y + 0.5, z + 1.0))
			elif block.shape == MinecraftElements.Shape.inner_left:
				vertices += getCuboidVertices((x,       y,       z), 
			                		          (x + 0.5, y + 0.5, z + 1.0))
				vertices += getCuboidVertices((x + 0.5, y,       z), 
			                		          (x + 1.0, y + 0.5, z + 0.5))
			elif block.shape == MinecraftElements.Shape.inner_right:
				vertices += getCuboidVertices((x,       y,       z), 
			                		          (x + 0.5, y + 0.5, z + 1.0))
				vertices += getCuboidVertices((x + 0.5, y,       z + 0.5), 
			                		          (x + 1.0, y + 0.5, z + 1.0))
			elif block.shape == MinecraftElements.Shape.outer_left:
				vertices += getCuboidVertices((x,       y,       z), 
			                		          (x + 0.5, y + 0.5, z + 0.5))
			elif block.shape == MinecraftElements.Shape.outer_right:
				vertices += getCuboidVertices((x,       y,       z + 0.5), 
			                		          (x + 0.5, y + 0.5, z + 1.0))

		elif block.facing == MinecraftElements.Facing.EAST:
			if block.shape == MinecraftElements.Shape.straight:
				vertices += getCuboidVertices((x + 0.5, y,       z), 
			                		          (x + 1.0, y + 0.5, z + 1.0))
			elif block.shape == MinecraftElements.Shape.inner_left:
				vertices += getCuboidVertices((x + 0.5, y,       z), 
			                		          (x + 1.0, y + 0.5, z + 1.0))
				vertices += getCuboidVertices((x,       y,       z + 0.5), 
			                		          (x + 0.5, y + 0.5, z + 1.0))
			elif block.shape == MinecraftElements.Shape.inner_right:
				vertices += getCuboidVertices((x + 0.5, y,       z), 
			                		          (x + 1.0, y + 0.5, z + 1.0))
				vertices += getCuboidVertices((x + 0.5, y,       z + 0.5), 
			                		          (x + 1.0, y + 0.5, z + 1.0))
			elif block.shape == MinecraftElements.Shape.outer_left:
				vertices += getCuboidVertices((x + 0.5, y,       z + 0.5), 
			                		          (x + 1.0, y + 0.5, z + 1.0))
			elif block.shape == MinecraftElements.Shape.outer_right:
				vertices += getCuboidVertices((x,       y,       z + 0.5), 
			                		          (x + 0.5, y + 0.5, z + 1.0))

		elif block.facing == MinecraftElements.Facing.NORTH:
			if block.shape == MinecraftElements.Shape.straight:
				vertices += getCuboidVertices((x,       y,       z), 
			                		          (x + 1.0, y + 0.5, z + 0.5))
			elif block.shape == MinecraftElements.Shape.inner_left:
				vertices += getCuboidVertices((x,       y,       z), 
			                		          (x + 1.0, y + 0.5, z + 0.5))
				vertices += getCuboidVertices((x,       y,       z + 0.5), 
			                		          (x + 0.5, y + 0.5, z + 1.0))
			elif block.shape == MinecraftElements.Shape.inner_right:
				vertices += getCuboidVertices((x,       y,       z), 
			                		          (x + 1.0, y + 0.5, z + 0.5))
				vertices += getCuboidVertices((x + 0.5, y,       z + 0.5), 
			                		          (x + 1.0, y + 0.5, z + 1.0))
			elif block.shape == MinecraftElements.Shape.outer_left:
				vertices += getCuboidVertices((x,       y,       z), 
			                		          (x + 0.5, y + 0.5, z + 0.5))
			elif block.shape == MinecraftElements.Shape.outer_right:
				vertices += getCuboidVertices((x + 0.5, y,       z), 
			                		          (x + 1.0, y + 0.5, z + 0.5))

		elif block.facing == MinecraftElements.Facing.SOUTH:
			if block.shape == MinecraftElements.Shape.straight:
				vertices += getCuboidVertices((x,       y,       z + 0.5), 
			                		          (x + 1.0, y + 0.5, z + 1.0))
			elif block.shape == MinecraftElements.Shape.inner_left:
				vertices += getCuboidVertices((x,       y,       z + 0.5), 
			                		          (x + 1.0, y + 0.5, z + 1.0))
				vertices += getCuboidVertices((x + 0.5, y,       z), 
			                		          (x + 1.0, y + 0.5, z + 0.5))
			elif block.shape == MinecraftElements.Shape.inner_right:
				vertices += getCuboidVertices((x,       y,       z + 0.5), 
			                		          (x + 1.0, y + 0.5, z + 1.0))
				vertices += getCuboidVertices((x,       y,       z), 
			                		          (x + 0.5, y + 0.5, z + 0.5))
			elif block.shape == MinecraftElements.Shape.outer_left:
				vertices += getCuboidVertices((x,       y,       z + 0.5), 
			                		          (x + 0.5, y + 0.5, z + 1.0))
			elif block.shape == MinecraftElements.Shape.outer_right:
				vertices += getCuboidVertices((x + 0.5, y,       z + 0.5), 
			                		          (x + 1.0, y + 0.5, z + 1.0))

	else:
		vertices = getCuboidVertices((x,       y,       z), 
		               		         (x + 1.0, y + 0.5, z + 1.0))

		if block.facing == MinecraftElements.Facing.WEST:
			if block.shape == MinecraftElements.Shape.straight:
				vertices += getCuboidVertices((x,       y + 0.5, z), 
			                		          (x + 0.5, y + 1.0, z + 1.0))
			elif block.shape == MinecraftElements.Shape.inner_left:
				vertices += getCuboidVertices((x,       y + 0.5, z), 
			                		          (x + 0.5, y + 1.0, z + 1.0))
				vertices += getCuboidVertices((x + 0.5, y + 0.5, z), 
			                		          (x + 1.0, y + 1.0, z + 0.5))
			elif block.shape == MinecraftElements.Shape.inner_right:
				vertices += getCuboidVertices((x,       y + 0.5, z), 
			                		          (x + 0.5, y + 1.0, z + 1.0))
				vertices += getCuboidVertices((x + 0.5, y + 0.5, z + 0.5), 
			                		          (x + 1.0, y + 1.0, z + 1.0))
			elif block.shape == MinecraftElements.Shape.outer_left:
				vertices += getCuboidVertices((x,       y + 0.5, z), 
			                		          (x + 0.5, y + 1.0, z + 0.5))
			elif block.shape == MinecraftElements.Shape.outer_right:
				vertices += getCuboidVertices((x,       y + 0.5, z + 0.5), 
			                		          (x + 0.5, y + 1.0, z + 1.0))

		elif block.facing == MinecraftElements.Facing.EAST:
			if block.shape == MinecraftElements.Shape.straight:
				vertices += getCuboidVertices((x + 0.5, y + 0.5, z), 
			                		          (x + 1.0, y + 1.0, z + 1.0))
			elif block.shape == MinecraftElements.Shape.inner_left:
				vertices += getCuboidVertices((x + 0.5, y + 0.5, z), 
			                		          (x + 1.0, y + 1.0, z + 1.0))
				vertices += getCuboidVertices((x,       y + 0.5, z + 0.5), 
			                		          (x + 0.5, y + 1.0, z + 1.0))
			elif block.shape == MinecraftElements.Shape.inner_right:
				vertices += getCuboidVertices((x + 0.5, y + 0.5, z), 
			                		          (x + 1.0, y + 1.0, z + 1.0))
				vertices += getCuboidVertices((x + 0.5, y + 0.5, z + 0.5), 
			                		          (x + 1.0, y + 1.0, z + 1.0))
			elif block.shape == MinecraftElements.Shape.outer_left:
				vertices += getCuboidVertices((x + 0.5, y + 0.5, z + 0.5), 
			                		          (x + 1.0, y + 1.0, z + 1.0))
			elif block.shape == MinecraftElements.Shape.outer_right:
				vertices += getCuboidVertices((x,       y + 0.5, z + 0.5), 
			                		          (x + 0.5, y + 1.0, z + 1.0))

		elif block.facing == MinecraftElements.Facing.NORTH:
			if block.shape == MinecraftElements.Shape.straight:
				vertices += getCuboidVertices((x,       y + 0.5, z), 
			                		          (x + 1.0, y + 1.0, z + 0.5))
			elif block.shape == MinecraftElements.Shape.inner_left:
				vertices += getCuboidVertices((x,       y + 0.5, z), 
			                		          (x + 1.0, y + 1.0, z + 0.5))
				vertices += getCuboidVertices((x,       y + 0.5, z + 0.5), 
			                		          (x + 0.5, y + 1.0, z + 1.0))
			elif block.shape == MinecraftElements.Shape.inner_right:
				vertices += getCuboidVertices((x,       y + 0.5, z), 
			                		          (x + 1.0, y + 1.0, z + 0.5))
				vertices += getCuboidVertices((x + 0.5, y + 0.5, z + 0.5), 
			                		          (x + 1.0, y + 1.0, z + 1.0))
			elif block.shape == MinecraftElements.Shape.outer_left:
				vertices += getCuboidVertices((x,       y + 0.5, z), 
			                		          (x + 0.5, y + 1.0, z + 0.5))
			elif block.shape == MinecraftElements.Shape.outer_right:
				vertices += getCuboidVertices((x + 0.5, y + 0.5, z), 
			                		          (x + 1.0, y + 1.0, z + 0.5))

		elif block.facing == MinecraftElements.Facing.SOUTH:
			if block.shape == MinecraftElements.Shape.straight:
				vertices += getCuboidVertices((x,       y + 0.5, z + 0.5), 
			                		          (x + 1.0, y + 1.0, z + 1.0))
			elif block.shape == MinecraftElements.Shape.inner_left:
				vertices += getCuboidVertices((x,       y + 0.5, z + 0.5), 
			                		          (x + 1.0, y + 1.0, z + 1.0))
				vertices += getCuboidVertices((x + 0.5, y + 0.5, z), 
			                		          (x + 1.0, y + 1.0, z + 0.5))
			elif block.shape == MinecraftElements.Shape.inner_right:
				vertices += getCuboidVertices((x,       y + 0.5, z + 0.5), 
			                		          (x + 1.0, y + 1.0, z + 1.0))
				vertices += getCuboidVertices((x,       y + 0.5, z), 
			                		          (x + 0.5, y + 1.0, z + 0.5))
			elif block.shape == MinecraftElements.Shape.outer_left:
				vertices += getCuboidVertices((x,       y + 0.5, z + 0.5), 
			                		          (x + 0.5, y + 1.0, z + 1.0))
			elif block.shape == MinecraftElements.Shape.outer_right:
				vertices += getCuboidVertices((x + 0.5, y + 0.5, z + 0.5), 
			                		          (x + 1.0, y + 1.0, z + 1.0))				

	return vertices


def getVerticesDoor(block):
	"""
	Render a door

	block - an instance of Block of type iron bar
	"""

	# Doors need to have a facing and hinge
	if block.facing is None:
		print(f'[renderDoor] - WARNING: block.facing is None.  Returning no vertices.')
		return None
	if block.hinge is None:
		print(f'[renderDoor] - WARNING: block.hinge is None.  Returning no vertices.')
		return None

	# What is the position of the chest and rgb values?
	x,y,z = block.location

	# Doors are drawn on one face of the block, which varies based on the door
	# facing, hinge, and whether it's open or closed
	render_facing = None

	if block.facing == MinecraftElements.Facing.WEST:
		if block.open:
			if block.hinge == MinecraftElements.Hinge.left:
				render_facing = MinecraftElements.Facing.NORTH
			elif block.hinge == MinecraftElements.Hinge.right:
				render_facing = MinecraftElements.Facing.SOUTH
		else:
			render_facing = MinecraftElements.Facing.WEST

	if block.facing == MinecraftElements.Facing.EAST:
		if block.open:
			if block.hinge == MinecraftElements.Hinge.left:
				render_facing = MinecraftElements.Facing.SOUTH
			elif block.hinge == MinecraftElements.Hinge.right:
				render_facing = MinecraftElements.Facing.NORTH
		else:
			render_facing = MinecraftElements.Facing.EAST

	if block.facing == MinecraftElements.Facing.NORTH:
		if block.open:
			if block.hinge == MinecraftElements.Hinge.left:
				render_facing = MinecraftElements.Facing.EAST
			elif block.hinge == MinecraftElements.Hinge.right:
				render_facing = MinecraftElements.Facing.WEST
		else:
			render_facing = MinecraftElements.Facing.NORTH

	if block.facing == MinecraftElements.Facing.SOUTH:
		if block.open:
			if block.hinge == MinecraftElements.Hinge.left:
				render_facing = MinecraftElements.Facing.WEST
			elif block.hinge == MinecraftElements.Hinge.right:
				render_facing = MinecraftElements.Facing.EAST
		else:
			render_facing = MinecraftElements.Facing.SOUTH

	# Do the actual drawing
	if render_facing == MinecraftElements.Facing.WEST:
		vertices = getCuboidVertices((x + 0.8125, y,       z), 
			                         (x + 1.0,    y + 1.0, z + 1.0))
	elif render_facing == MinecraftElements.Facing.EAST:
		vertices = getCuboidVertices((x,          y,       z), 
			                         (x + 0.1875, y + 1.0, z + 1.0))
	elif render_facing == MinecraftElements.Facing.SOUTH:
		vertices = getCuboidVertices((x,       y,       z), 
			                         (x + 1.0, y + 1.0, z + 0.1875))
	elif render_facing == MinecraftElements.Facing.NORTH:
		vertices = getCuboidVertices((x,       y,       z + 0.8125), 
			                         (x + 1.0, y + 1.0, z + 1.0))
	else:
		print(f'[renderDoor] - WARNING: Invalid render_facing: {block.facing}.  Returning no vertices.')
		return None

	return vertices


def getVerticesTrapdoor(block):
	"""
	Render a trapdoor

	block - an instance of Block of type iron bar
	"""

	# Doors need to have a facing and half
	if block.facing is None:
		print(f'[renderTrapdoor] - WARNING: block.facing is None.  Returning no vertices.')
		return None
	if block.half is None:
		print(f'[renderTrapdoor] - WARNING: block.half is None.  Returning no vertices.')
		return None

	# What is the position of the chest and rgb values?
	x,y,z = block.location

	if block.open:
		if block.facing == MinecraftElements.Facing.WEST:
			vertices = getCuboidVertices((x + 0.8125, y,       z), 
				                         (x + 1.0,    y + 1.0, z + 1.0))
		elif block.facing == MinecraftElements.Facing.EAST:
			vertices = getCuboidVertices((x,          y,       z), 
				                         (x + 0.1875, y + 1.0, z + 1.0))
		elif block.facing == MinecraftElements.Facing.NORTH:
			vertices = getCuboidVertices((x,       y,       z + 0.8125), 
				                         (x + 1.0, y + 1.0, z + 1.0))
		elif block.facing == MinecraftElements.Facing.SOUTH:
			vertices = getCuboidVertices((x,       y,       z), 
				                         (x + 1.0, y + 1.0, z + 0.1875))
	else:
		if block.half == MinecraftElements.Half.top:
			vertices = getCuboidVertices((x,       y + 0.8125, z), 
				                         (x + 1.0, y + 1.0,    z + 1.0))
		elif block.half == MinecraftElements.Half.bottom:
			vertices = getCuboidVertices((x,       y,          z), 
				                         (x + 1.0, y + 0.1875, z + 1.0))

	return vertices


def getVerticesFire(block):
	"""
	Render fire.  Fire has a dynamic appearance, so is not easy to render with
	high precision.  As an approximation, treat fire as a 3/8 high block.

	block - an instance of Block with type fire
	"""

	# What is the position of the block and rgb values?
	x,y,z = block.location

	vertices = getCuboidVertices((x,       y,         z), 
		                         (x + 1.0, y + 0.375, z + 1.0))

	return vertices


def getVerticesWall(block):
	"""
	Render a wall.  

	block - an instance of Block of type iron bar
	color - (R,G,B) tuple, each element is in range 0.0 - 1.0
	"""

	# What is the position of the chest and rgb values?
	x,y,z = block.location

	# Draw the center post.
	vertices = getCuboidVertices((x + 0.25, y,       z + 0.25), 
		                         (x + 0.75, y + 1.0, z + 0.75))

	# Draw the pane in each direction present
	if block.north:
		vertices += getCuboidVertices((x + 0.3125, y,         z), 
		                              (x + 0.6875, y + 0.875, z + 0.25))
	if block.south:
		vertices += getCuboidVertices((x + 0.3125, y,         z + 0.75), 
		                              (x + 0.6875, y + 0.875, z + 1.0))
	if block.east:
		vertices += getCuboidVertices((x + 0.75, y,         z + 0.3125), 
		                              (x + 1.0,  y + 0.875, z + 0.6875))
	if block.west:
		vertices += getCuboidVertices((x,        y,         z + 0.3125), 
		                              (x + 0.25, y + 0.875, z + 0.6875))

	return vertices


def getVerticesSnowLayer(block):
	"""
	Render a snow layer.  

	block - an instance of Block of type iron bar
	"""

	# What is the position of the chest and rgb values?
	x,y,z = block.location

	height = 0.125 * block.layers

	# Draw the snow
	vertices = getCuboidVertices((x,       y,          z), 
		                         (x + 1.0, y + height, z + 1.0))

	return vertices


def getVerticesCactus(block):
	"""
	Render a cactus.  

	block - an instance of Block of type cactus
	"""

	# What is the position of the chest and rgb values?
	x,y,z = block.location

	# Draw the snow
	vertices = getCuboidVertices((x + 0.0625, y,       z + 0.0625), 
		                         (x + 0.9375, y + 1.0, z + 0.9375))

	return vertices


def getVerticesEnchantingTable(block):
	"""
	Render an enchanting table.  Note that the book on top is not rendered.  

	block - an instance of Block of type enchanting table
	"""

	# What is the position of the chest and rgb values?
	x,y,z = block.location

	# Draw the snow
	vertices = getCuboidVertices((x,       y,        z), 
		                         (x + 1.0, y + 0.75, z + 1.0))

	return vertices


def getVerticesTorch(block):
	"""
	Render a torch.  NOTE:  The angle of the torch is approximate, this
	should be improved upon later.  The angle is not accounted for---torches
	are simply placed vertically against the wall.

	block - an instance of Block of type hopper
	"""

	# Only attempt to render if the block has a facing attribute
	if block.facing is None:
		print(f'[renderTorch] - WARNING: block.facing is None.  Returning no vertices.')
		return None

	# What is the position of the chest and rgb values?
	x,y,z = block.location

	if block.facing == MinecraftElements.Facing.NORTH:
		vertices = getCuboidVertices((x + 0.4375, y + 0.1875, z + 0.875), 
									 (x + 0.5625, y + 0.75,   z + 1.0))
	elif block.facing == MinecraftElements.Facing.SOUTH:
		vertices = getCuboidVertices((x + 0.4375, y + 0.1875, z), 
									 (x + 0.5625, y + 0.75,   z + 0.125))
	elif block.facing == MinecraftElements.Facing.EAST:
		vertices = getCuboidVertices((x,         y + 0.1875, z + 0.4375), 
									 (x + 0.125, y + 0.75,   z + 0.5625))
	elif block.facing == MinecraftElements.Facing.WEST:
		vertices = getCuboidVertices((x + 0.875, y + 0.1875, z + 0.4375), 
									 (x + 1.0,   y + 0.75,   z + 0.5625))
	elif block.facing == MinecraftElements.Facing.UP:
		vertices = getCuboidVertices((x + 0.4375, y,          z + 0.4375), 
									 (x + 0.5625, y + 0.5625, z + 0.5625))
	else:
		print(f'[renderTorch] - WARNING: Invalid block.facing: {block.facing}.  Returning no vertices.')
		return None

	return vertices


def getVerticesWallBanner(block):
	"""
	Render a wall banner.  Wall banners are 7/8 x 1-3/4 x 3/16, and are positioned based
	on their facing.

	block - an instance of Block
	"""

	# The block must have a facing.  If not present, don't render 
	if block.facing is None:
		print(f'[renderWallBanner] - WARNING: block.facing is None.  Returning no vertices.')
		return None

	# What is the position of the chest and rgb values?
	x,y,z = block.location

	# Bounds of the sign are based on the facing
	if block.facing == MinecraftElements.Facing.SOUTH:
		vertices = getCuboidVertices((x + 0.0625, y + 0.75,  z), 
			                         (x + 0.9375, y + 0.875, z + 0.125))
		vertices = getCuboidVertices((x + 0.0625, y - 0.875, z + 0.125), 
			                         (x + 0.9375, y + 0.875, z + 0.1875))
	elif block.facing == MinecraftElements.Facing.NORTH:
		vertices = getCuboidVertices((x + 0.0625, y + 0.75,  z + 0.875), 
			                         (x + 0.9375, y + 0.875, z + 1.0))
		vertices = getCuboidVertices((x + 0.0625, y - 0.875, z + 0.8125), 
			                         (x + 0.9375, y + 0.875, z + 0.875))
	elif block.facing == MinecraftElements.Facing.EAST:
		vertices = getCuboidVertices((x,         y + 0.75,  z + 0.0625), 
			                         (x + 0.125, y + 0.875, z + 0.9375))
		vertices = getCuboidVertices((x + 0.125,  y - 0.875, z + 0.0625), 
			                         (x + 0.1875, y + 0.875, z + 0.9375))
	elif block.facing == MinecraftElements.Facing.WEST:
		vertices = getCuboidVertices((x + 0.875, y + 0.75,  z + 0.0625), 
			                         (x + 1.0,   y + 0.875, z + 0.9375))
		vertices = getCuboidVertices((x + 0.8125, y - 0.875, z + 0.0625), 
			                         (x + 0.875,  y + 0.875, z + 0.9375))		
	else:
		print(f'[renderTorch] - WARNING: Invalid block.facing: {block.facing}.  Returning no vertices.')
		return None

	return vertices


def getVerticesLava(block):
	"""
	Render a block of stationary lava.

	block - an instance of Block of type lava
	"""

	# What is the position of the block?
	x,y,z = block.location

	# Draw the snow
	vertices = getCuboidVertices((x,       y,        z), 
		                         (x + 1.0, y + 0.875, z + 1.0))

	return vertices


def getVerticesMarkerBlock(block):
	"""
	Render a marker block

	block - an instance of Block of type marker block
	"""

	# Where is the marker block?
	x,y,z = block.location

	# Draw the block
	vertices = getCuboidVertices((x + 0.0625, y,          z + 0.0625),
		                         (x + 0.9375, y + 0.0625, z + 0.9375))

	return vertices


def getVerticesBrewingStand(block):
	"""
	Render a brewing stand

	block - an instance of Block with type brewing_stand
	"""

	# Where is the block?
	x,y,z = block.location

	# Create the vertices
	vertices = []

	vertices += getCuboidVertices((x + 0.125, y,         z + 0.0625),
		                          (x + 0.5  , y + 0.125, z + 0.4375))

	vertices += getCuboidVertices((x + 0.125, y,         z + 0.5625),
		                          (x + 0.5  , y + 0.125, z + 0.9375))

	vertices += getCuboidVertices((x + 0.5625, y,         z + 0.3125),
		                          (x + 0.9375, y + 0.125, z + 0.6875))

	vertices += getCuboidVertices((x + 0.4375, y,         z + 0.4375),
		                          (x + 0.5625, y + 0.875, z + 0.5625))

	return vertices

# For things we don't know yet, don't render
NOT_YET_KNOWN = getUnknownVertices


getVerticesStandingSign = NOT_YET_KNOWN
getVerticesBanner = NOT_YET_KNOWN
getVerticesFlowingLava = NOT_YET_KNOWN
getVerticesFlowingWater = NOT_YET_KNOWN

#getVerticesMarkerBlock = getVerticesUnitBlock

# renderLibrary maps a block type to a rendering function
getVerticesLibrary = {
	MinecraftElements.Block.air: getVerticesEmpty,
	MinecraftElements.Block.stone: getVerticesUnitBlock,
	MinecraftElements.Block.grass: getVerticesUnitBlock,
	MinecraftElements.Block.dirt: getVerticesUnitBlock,
	MinecraftElements.Block.cobblestone: getVerticesUnitBlock,
	MinecraftElements.Block.planks: getVerticesUnitBlock,
	MinecraftElements.Block.sapling: NOT_YET_KNOWN,
	MinecraftElements.Block.bedrock: getVerticesUnitBlock,
	MinecraftElements.Block.flowing_water: getVerticesFlowingWater,
	MinecraftElements.Block.water: getVerticesWater,
	MinecraftElements.Block.flowing_lava: getVerticesFlowingLava,
	MinecraftElements.Block.lava: getVerticesLava,
	MinecraftElements.Block.sand: getVerticesUnitBlock,
	MinecraftElements.Block.gravel: getVerticesUnitBlock,
	MinecraftElements.Block.gold_ore: getVerticesUnitBlock,
	MinecraftElements.Block.iron_ore: getVerticesUnitBlock,
	MinecraftElements.Block.coal_ore: getVerticesUnitBlock,
	MinecraftElements.Block.log: getVerticesUnitBlock,
	MinecraftElements.Block.leaves: getVerticesUnitBlock,
	MinecraftElements.Block.sponge: getVerticesUnitBlock,
	MinecraftElements.Block.glass: getVerticesUnitBlock,
	MinecraftElements.Block.lapis_ore: getVerticesUnitBlock,
	MinecraftElements.Block.lapis_block: getVerticesUnitBlock,
	MinecraftElements.Block.dispenser: getVerticesUnitBlock,             
	MinecraftElements.Block.sandstone: getVerticesUnitBlock,
	MinecraftElements.Block.noteblock: getVerticesUnitBlock,
	MinecraftElements.Block.bed: NOT_YET_KNOWN,
	MinecraftElements.Block.golden_rail: NOT_YET_KNOWN,
	MinecraftElements.Block.detector_rail: NOT_YET_KNOWN,
	MinecraftElements.Block.sticky_piston: NOT_YET_KNOWN,		
	MinecraftElements.Block.web: NOT_YET_KNOWN,
	MinecraftElements.Block.tallgrass: NOT_YET_KNOWN,
	MinecraftElements.Block.deadbush: NOT_YET_KNOWN,
	MinecraftElements.Block.piston: NOT_YET_KNOWN,
	MinecraftElements.Block.piston_head: NOT_YET_KNOWN,
	MinecraftElements.Block.wool: getVerticesUnitBlock,                      
	MinecraftElements.Block.piston_extension: NOT_YET_KNOWN,
	MinecraftElements.Block.yellow_flower: NOT_YET_KNOWN,
	MinecraftElements.Block.red_flower: NOT_YET_KNOWN,
	MinecraftElements.Block.brown_mushroom: NOT_YET_KNOWN,
	MinecraftElements.Block.red_mushroom: NOT_YET_KNOWN,
	MinecraftElements.Block.gold_block: getVerticesUnitBlock,
	MinecraftElements.Block.iron_block: getVerticesUnitBlock,                  
	MinecraftElements.Block.double_stone_slab: getVerticesUnitBlock,         
	MinecraftElements.Block.stone_slab: getVerticesSlab,
	MinecraftElements.Block.brick_block: getVerticesUnitBlock,
	MinecraftElements.Block.tnt: getVerticesUnitBlock,
	MinecraftElements.Block.bookshelf: getVerticesUnitBlock,                 
	MinecraftElements.Block.mossy_cobblestone: getVerticesUnitBlock,
	MinecraftElements.Block.obsidian: getVerticesUnitBlock,
	MinecraftElements.Block.torch: getVerticesTorch,
	MinecraftElements.Block.fire: getVerticesFire,
	MinecraftElements.Block.mob_spawner: getVerticesUnitBlock,
	MinecraftElements.Block.oak_stairs: getVerticesStairs,                   
	MinecraftElements.Block.chest: getVerticesChest,							
	MinecraftElements.Block.redstone_wire: NOT_YET_KNOWN,			
	MinecraftElements.Block.diamond_ore: getVerticesUnitBlock,
	MinecraftElements.Block.diamond_block: getVerticesUnitBlock,
	MinecraftElements.Block.crafting_table: getVerticesUnitBlock,            
	MinecraftElements.Block.wheat: NOT_YET_KNOWN,
	MinecraftElements.Block.farmland: NOT_YET_KNOWN,
	MinecraftElements.Block.furnace: getVerticesUnitBlock,
	MinecraftElements.Block.lit_furnace: getVerticesUnitBlock,
	MinecraftElements.Block.standing_sign: getVerticesStandingSign,        	
	MinecraftElements.Block.wooden_door: getVerticesDoor,
	MinecraftElements.Block.ladder: getVerticesLadder,                       
	MinecraftElements.Block.rail: NOT_YET_KNOWN,
	MinecraftElements.Block.stone_stairs: getVerticesStairs,
	MinecraftElements.Block.wall_sign: getVerticesWallSign,                 
	MinecraftElements.Block.lever: getVerticesLever,
	MinecraftElements.Block.stone_pressure_plate: getVerticesPressurePlate,
	MinecraftElements.Block.iron_door: getVerticesDoor,
	MinecraftElements.Block.wooden_pressure_plate: getVerticesPressurePlate,
	MinecraftElements.Block.redstone_ore: getVerticesUnitBlock,
	MinecraftElements.Block.lit_redstone_ore: getVerticesUnitBlock,
	MinecraftElements.Block.unlit_redstone_torch: getVerticesTorch,   
	MinecraftElements.Block.redstone_torch: getVerticesTorch,
	MinecraftElements.Block.stone_button: getVerticesButton,
	MinecraftElements.Block.snow_layer: getVerticesSnowLayer,
	MinecraftElements.Block.ice: getVerticesUnitBlock,
	MinecraftElements.Block.snow: getVerticesUnitBlock,
	MinecraftElements.Block.cactus: getVerticesCactus,
	MinecraftElements.Block.clay: getVerticesUnitBlock,                 
	MinecraftElements.Block.reeds: NOT_YET_KNOWN,
	MinecraftElements.Block.jukebox: getVerticesUnitBlock,
	MinecraftElements.Block.fence: getVerticesFence,
	MinecraftElements.Block.pumpkin: getVerticesUnitBlock,
	MinecraftElements.Block.netherrack: getVerticesUnitBlock,
	MinecraftElements.Block.soul_sand: getVerticesUnitBlock,
	MinecraftElements.Block.glowstone: getVerticesUnitBlock,
	MinecraftElements.Block.portal: NOT_YET_KNOWN,
	MinecraftElements.Block.lit_pumpkin: getVerticesUnitBlock,
	MinecraftElements.Block.cake: NOT_YET_KNOWN,
	MinecraftElements.Block.unpowered_repeater: NOT_YET_KNOWN,
	MinecraftElements.Block.powered_repeater: NOT_YET_KNOWN,
	MinecraftElements.Block.stained_glass: getVerticesUnitBlock,
	MinecraftElements.Block.trapdoor: getVerticesTrapdoor,
	MinecraftElements.Block.monster_egg: getVerticesUnitBlock,
	MinecraftElements.Block.stonebrick: getVerticesUnitBlock,
	MinecraftElements.Block.brown_mushroom_block: getVerticesUnitBlock,
	MinecraftElements.Block.red_mushroom_block: getVerticesUnitBlock,
	MinecraftElements.Block.iron_bars: getVerticesBars,
	MinecraftElements.Block.glass_pane: getVerticesGlassPane,
	MinecraftElements.Block.melon_block: getVerticesUnitBlock,
	MinecraftElements.Block.pumpkin_stem: NOT_YET_KNOWN,
	MinecraftElements.Block.melon_stem: NOT_YET_KNOWN,
	MinecraftElements.Block.vine: NOT_YET_KNOWN,
	MinecraftElements.Block.fence_gate: getVerticesFenceGate,
	MinecraftElements.Block.brick_stairs: getVerticesStairs,
	MinecraftElements.Block.stone_brick_stairs: getVerticesStairs,
	MinecraftElements.Block.mycelium: getVerticesUnitBlock,
	MinecraftElements.Block.waterlily: NOT_YET_KNOWN,
	MinecraftElements.Block.nether_brick: getVerticesUnitBlock,
	MinecraftElements.Block.nether_brick_fence: getVerticesFence,
	MinecraftElements.Block.nether_brick_stairs: getVerticesStairs,
	MinecraftElements.Block.nether_wart: getVerticesUnitBlock,
	MinecraftElements.Block.enchanting_table: getVerticesEnchantingTable,
	MinecraftElements.Block.brewing_stand: getVerticesBrewingStand,
	MinecraftElements.Block.cauldron: getVerticesCauldron,
	MinecraftElements.Block.end_portal: NOT_YET_KNOWN,
	MinecraftElements.Block.end_portal_frame: getVerticesEndPortalFrame,
	MinecraftElements.Block.end_stone: NOT_YET_KNOWN,
	MinecraftElements.Block.dragon_egg: NOT_YET_KNOWN,
	MinecraftElements.Block.redstone_lamp: getVerticesUnitBlock,
	MinecraftElements.Block.lit_redstone_lamp: getVerticesUnitBlock,
	MinecraftElements.Block.double_wooden_slab: getVerticesUnitBlock,
	MinecraftElements.Block.wooden_slab: getVerticesSlab,
	MinecraftElements.Block.cocoa: NOT_YET_KNOWN,
	MinecraftElements.Block.sandstone_stairs: getVerticesStairs,
	MinecraftElements.Block.emerald_ore: getVerticesUnitBlock,
	MinecraftElements.Block.ender_chest: getVerticesChest,
	MinecraftElements.Block.tripwire_hook: getVerticesTripwireHook,
	MinecraftElements.Block.tripwire: NOT_YET_KNOWN,
	MinecraftElements.Block.emerald_block: getVerticesUnitBlock,
	MinecraftElements.Block.spruce_stairs: getVerticesStairs,
	MinecraftElements.Block.birch_stairs: getVerticesStairs,
	MinecraftElements.Block.jungle_stairs: getVerticesStairs,
	MinecraftElements.Block.command_block: getVerticesUnitBlock,
	MinecraftElements.Block.beacon: NOT_YET_KNOWN,
	MinecraftElements.Block.cobblestone_wall: getVerticesWall,
	MinecraftElements.Block.flower_pot: getVerticesFlowerPot,
	MinecraftElements.Block.carrots: NOT_YET_KNOWN,
	MinecraftElements.Block.potatoes: NOT_YET_KNOWN,
	MinecraftElements.Block.wooden_button: getVerticesButton,
	MinecraftElements.Block.skull: NOT_YET_KNOWN,
	MinecraftElements.Block.anvil: getVerticesAnvil,
	MinecraftElements.Block.trapped_chest: getVerticesChest,
	MinecraftElements.Block.light_weighted_pressure_plate: getVerticesPressurePlate,
	MinecraftElements.Block.heavy_weighted_pressure_plate: getVerticesPressurePlate,
	MinecraftElements.Block.unpowered_comparator: NOT_YET_KNOWN,
	MinecraftElements.Block.powered_comparator: NOT_YET_KNOWN,
	MinecraftElements.Block.daylight_detector: NOT_YET_KNOWN,
	MinecraftElements.Block.redstone_block: getVerticesUnitBlock,
	MinecraftElements.Block.quartz_ore: getVerticesUnitBlock,
	MinecraftElements.Block.hopper: getVerticesHopper,
	MinecraftElements.Block.quartz_block: getVerticesUnitBlock,
	MinecraftElements.Block.quartz_stairs: getVerticesStairs,
	MinecraftElements.Block.activator_rail: NOT_YET_KNOWN,
	MinecraftElements.Block.dropper: getVerticesUnitBlock,
	MinecraftElements.Block.stained_hardened_clay: getVerticesUnitBlock,
	MinecraftElements.Block.stained_glass_pane: getVerticesGlassPane,
	MinecraftElements.Block.leaves2: getVerticesUnitBlock,
	MinecraftElements.Block.log2: getVerticesUnitBlock,
	MinecraftElements.Block.acacia_stairs: getVerticesStairs,
	MinecraftElements.Block.dark_oak_stairs: getVerticesStairs,
	MinecraftElements.Block.slime: getVerticesUnitBlock,
	MinecraftElements.Block.barrier: getVerticesEmpty,
	MinecraftElements.Block.iron_trapdoor: getVerticesTrapdoor,
	MinecraftElements.Block.prismarine: getVerticesUnitBlock,
	MinecraftElements.Block.sea_lantern: getVerticesUnitBlock,
	MinecraftElements.Block.hay_block: getVerticesUnitBlock,
	MinecraftElements.Block.carpet: NOT_YET_KNOWN,
	MinecraftElements.Block.hardened_clay: getVerticesUnitBlock,
	MinecraftElements.Block.coal_block: getVerticesUnitBlock,
	MinecraftElements.Block.packed_ice: NOT_YET_KNOWN,
	MinecraftElements.Block.double_plant: NOT_YET_KNOWN,
	MinecraftElements.Block.standing_banner: getVerticesBanner,
	MinecraftElements.Block.wall_banner: getVerticesWallBanner,
	MinecraftElements.Block.daylight_detector_inverted: NOT_YET_KNOWN,
	MinecraftElements.Block.red_sandstone: getVerticesUnitBlock,
	MinecraftElements.Block.red_sandstone_stairs: getVerticesStairs,
	MinecraftElements.Block.double_stone_slab2: getVerticesUnitBlock,
	MinecraftElements.Block.stone_slab2: getVerticesSlab,
	MinecraftElements.Block.spruce_fence_gate: getVerticesFenceGate,
	MinecraftElements.Block.birch_fence_gate: getVerticesFenceGate,
	MinecraftElements.Block.jungle_fence_gate: getVerticesFenceGate,
	MinecraftElements.Block.dark_oak_fence_gate: getVerticesFenceGate,
	MinecraftElements.Block.acacia_fence_gate: getVerticesFenceGate,
	MinecraftElements.Block.spruce_fence: getVerticesFence,
	MinecraftElements.Block.birch_fence: getVerticesFence,
	MinecraftElements.Block.jungle_fence: getVerticesFence,
	MinecraftElements.Block.dark_oak_fence: getVerticesFence,
	MinecraftElements.Block.acacia_fence: getVerticesFence,
	MinecraftElements.Block.spruce_door: getVerticesDoor,
	MinecraftElements.Block.birch_door: getVerticesDoor,
	MinecraftElements.Block.jungle_door: getVerticesDoor,
	MinecraftElements.Block.acacia_door: getVerticesDoor,
	MinecraftElements.Block.dark_oak_door: getVerticesDoor,
	MinecraftElements.Block.end_rod: NOT_YET_KNOWN,
	MinecraftElements.Block.chorus_plant: NOT_YET_KNOWN,
	MinecraftElements.Block.chorus_flower: NOT_YET_KNOWN,
	MinecraftElements.Block.purpur_block: getVerticesUnitBlock,
	MinecraftElements.Block.purpur_pillar: getVerticesUnitBlock,
	MinecraftElements.Block.purpur_stairs: getVerticesStairs,
	MinecraftElements.Block.purpur_double_slab: getVerticesUnitBlock,
	MinecraftElements.Block.purpur_slab: getVerticesSlab,
	MinecraftElements.Block.end_bricks: NOT_YET_KNOWN,
	MinecraftElements.Block.beetroots: NOT_YET_KNOWN,
	MinecraftElements.Block.grass_path: NOT_YET_KNOWN,
	MinecraftElements.Block.end_gateway: NOT_YET_KNOWN,
	MinecraftElements.Block.repeating_command_block: getVerticesUnitBlock,
	MinecraftElements.Block.chain_command_block: NOT_YET_KNOWN,
	MinecraftElements.Block.frosted_ice: NOT_YET_KNOWN,
	MinecraftElements.Block.magma: getVerticesUnitBlock,
	MinecraftElements.Block.nether_wart_block: getVerticesUnitBlock,
	MinecraftElements.Block.red_nether_brick: getVerticesUnitBlock,
	MinecraftElements.Block.bone_block: getVerticesUnitBlock,
	MinecraftElements.Block.structure_void: getVerticesEmpty,
	MinecraftElements.Block.observer: NOT_YET_KNOWN,
	MinecraftElements.Block.white_shulker_box: getVerticesUnitBlock,
	MinecraftElements.Block.orange_shulker_box: getVerticesUnitBlock,
	MinecraftElements.Block.magenta_shulker_box: getVerticesUnitBlock,
	MinecraftElements.Block.light_blue_shulker_box: getVerticesUnitBlock,
	MinecraftElements.Block.yellow_shulker_box: getVerticesUnitBlock,
	MinecraftElements.Block.lime_shulker_box: getVerticesUnitBlock,
	MinecraftElements.Block.pink_shulker_box: getVerticesUnitBlock,
	MinecraftElements.Block.gray_shulker_box: getVerticesUnitBlock,
	MinecraftElements.Block.silver_shulker_box: getVerticesUnitBlock,
	MinecraftElements.Block.cyan_shulker_box: getVerticesUnitBlock,
	MinecraftElements.Block.purple_shulker_box: getVerticesUnitBlock,
	MinecraftElements.Block.blue_shulker_box: getVerticesUnitBlock,
	MinecraftElements.Block.brown_shulker_box: getVerticesUnitBlock,
	MinecraftElements.Block.green_shulker_box: getVerticesUnitBlock,
	MinecraftElements.Block.red_shulker_box: getVerticesUnitBlock,
	MinecraftElements.Block.black_shulker_box: getVerticesUnitBlock,	
	MinecraftElements.Block.white_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.orange_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.magenta_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.light_blue_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.yellow_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.lime_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.pink_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.gray_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.light_gray_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.cyan_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.purple_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.blue_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.brown_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.green_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.red_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.black_glazed_terracotta: getVerticesUnitBlock,
	MinecraftElements.Block.concrete: getVerticesUnitBlock,
	MinecraftElements.Block.concrete_powder: getVerticesUnitBlock,
	MinecraftElements.Block.structure_block: getVerticesUnitBlock,
	MinecraftElements.Block.block_victim_1: getVerticesUnitBlock,
	MinecraftElements.Block.block_victim_1b: getVerticesUnitBlock,
	MinecraftElements.Block.block_victim_2: getVerticesUnitBlock,
	MinecraftElements.Block.block_victim_saved: getVerticesUnitBlock,
	MinecraftElements.Block.block_victim_expired: getVerticesUnitBlock,
	MinecraftElements.Block.block_victim_proximity: getVerticesUnitBlock,
	MinecraftElements.Block.block_victim_saved_a: getVerticesUnitBlock,
	MinecraftElements.Block.block_victim_saved_b: getVerticesUnitBlock,
	MinecraftElements.Block.block_victim_saved_c: getVerticesUnitBlock,
	MinecraftElements.Block.perturbation_opening: getVerticesBoundingBox,
	MinecraftElements.Block.marker_block: getVerticesMarkerBlock,
	MinecraftElements.Block.block_freeze_player: getVerticesUnitBlock,
	MinecraftElements.Block.block_threat_sign: getVerticesUnitBlock,
	MinecraftElements.Block.block_marker_1_red: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_2_red: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_3_red: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_4_red: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_5_red: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_6_red: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_1_green: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_2_green: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_3_green: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_4_green: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_5_green: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_6_green: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_1_blue: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_2_blue: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_3_blue: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_4_blue: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_5_blue: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_6_blue: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_blue_abrasion: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_blue_bonedamage: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_blue_critical: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_blue_criticalvictim: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_blue_regularvictim: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_blue_rubble: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_blue_threat: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_blue_wildcard: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_green_abrasion: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_green_bonedamage: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_green_critical: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_green_criticalvictim: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_green_regularvictim: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_green_rubble: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_green_threat: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_green_wildcard: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_red_abrasion: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_red_bonedamage: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_red_critical: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_red_criticalvictim: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_red_regularvictim: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_red_rubble: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_red_threat: getVerticesMarkerBlock,
	MinecraftElements.Block.block_marker_red_wildcard: getVerticesMarkerBlock,
	MinecraftElements.Block.block_role_hs: getVerticesUnitBlock,
	MinecraftElements.Block.block_role_med: getVerticesUnitBlock,
	MinecraftElements.Block.block_role_ss: getVerticesUnitBlock,
	MinecraftElements.Block.block_role_engineer: getVerticesUnitBlock,
	MinecraftElements.Block.block_role_medic: getVerticesUnitBlock,
	MinecraftElements.Block.block_role_transporter: getVerticesUnitBlock,
	MinecraftElements.Block.UNKNOWN: NOT_YET_KNOWN,
	MinecraftElements.Block.blue_novictim: getVerticesMarkerBlock,
	MinecraftElements.Block.green_novictim: getVerticesMarkerBlock,
	MinecraftElements.Block.red_novictim: getVerticesMarkerBlock,
	MinecraftElements.Block.blue_sos: getVerticesMarkerBlock,
	MinecraftElements.Block.green_sos: getVerticesMarkerBlock,
	MinecraftElements.Block.red_sos: getVerticesMarkerBlock,
	MinecraftElements.Block.red_regularvictim: getVerticesMarkerBlock,
	MinecraftElements.Block.red_criticalvictim: getVerticesMarkerBlock,
	MinecraftElements.Block.red_abrasion: getVerticesMarkerBlock,
	MinecraftElements.Block.red_bonedamage: getVerticesMarkerBlock,
	MinecraftElements.Block.red_critical: getVerticesMarkerBlock,
	MinecraftElements.Block.red_rubble: getVerticesMarkerBlock,
	MinecraftElements.Block.red_threat: getVerticesMarkerBlock,
	MinecraftElements.Block.red_wildcard: getVerticesMarkerBlock,
	MinecraftElements.Block.green_regularvictim: getVerticesMarkerBlock,
	MinecraftElements.Block.green_criticalvictim: getVerticesMarkerBlock,
	MinecraftElements.Block.green_abrasion: getVerticesMarkerBlock,
	MinecraftElements.Block.green_bonedamage: getVerticesMarkerBlock,
	MinecraftElements.Block.green_critical: getVerticesMarkerBlock,
	MinecraftElements.Block.green_rubble: getVerticesMarkerBlock,
	MinecraftElements.Block.green_threat: getVerticesMarkerBlock,
	MinecraftElements.Block.green_wildcard: getVerticesMarkerBlock,
	MinecraftElements.Block.blue_regularvictim: getVerticesMarkerBlock,
	MinecraftElements.Block.blue_criticalvictim: getVerticesMarkerBlock,
	MinecraftElements.Block.blue_abrasion: getVerticesMarkerBlock,
	MinecraftElements.Block.blue_bonedamage: getVerticesMarkerBlock,
	MinecraftElements.Block.blue_critical: getVerticesMarkerBlock,
	MinecraftElements.Block.blue_rubble: getVerticesMarkerBlock,
	MinecraftElements.Block.blue_threat: getVerticesMarkerBlock,
	MinecraftElements.Block.blue_wildcard: getVerticesMarkerBlock,
	MinecraftElements.Block.MarkerBlockred: getVerticesMarkerBlock,
	MinecraftElements.Block.MarkerBlockblue: getVerticesMarkerBlock,
	MinecraftElements.Block.MarkerBlockgreen: getVerticesMarkerBlock,
}
