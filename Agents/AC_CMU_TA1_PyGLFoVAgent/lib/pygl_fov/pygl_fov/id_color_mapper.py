"""
A class for mapping Block ID numbers to and from RGB values
"""

class BlockColorMapper:
	"""
	The BlockColorMapper is responsible for mapping Blocks to and from RGB 
	colors by ID.
	"""

	def __init__(self):
		"""
		"""

		pass


	def color(self, block):
		"""
		Calculates the RGB value to render the block based on the id of the
		block.

		A unique RGB value is calcualted based on the block's ID.  

		NOTE: As the rendered scene will generate a black background, the ID is
		      incremented by 1 to avoid confusing blocks of ID 0 with the 
		      background without blocks.  The pixel-level ID needs to decrement
		      the ID generated by the pixel color

		Args:
			block - an instance of Block, whose id is in the range of 
			        [0, 256**3 -1]

		Return:
			A tuple (r,g,b), where each channel is represented by an integer
			value in the range of [0 - 255].
		"""

		b = (block.id + 1) % 256
		g = ((block.id + 1) // 256) % 256
		r = ((block.id + 1) // (256**2)) % 256		

		return r,g,b


	def id(self, color):
		"""
		Calculate the ID of the block from the provided color.  This method is
		the inverse of __getColorByID.

		Args:
			color - a tuple (r,g,b).  Each channel may be an ndarray.  Values
			        of each channel must be in the range [0,255].

		Return:
			An integer ID (or ndarray) in the range of [0, 256**3 - 1], or -1
			for pixels not associated with a block.
		"""

		# Extract r,g,b for convenience
		r,g,b = color

		# To recover the indices, right shift r and g by 16 and 8 bits, add
		# channels and decrement by 1
		return r*(256**2) + g*256 + b - 1

