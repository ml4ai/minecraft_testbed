Installation
============

Requirements
------------

This module may be used with python version 3.4 and later.  Installation is best performed using `pip`_.

Interfacing through a MQTT broker requires the Eclipse Paho MQTT client package to be installed.  This is most easily installed through `pip`::

    pip install [--user] paho-mqtt

Messages generated by the bridge also leverate the `dateutil` package to parse and generate ISO formatted timestamps.  This is installed easily through `pip`::

    pip install [--user] python-dateutil

This module requires `MinecraftElements`_. to correctly operate.  While the `master` branch should be compatible with this version of `MinecraftBridge`, specific versions of `MinecraftElements` should be utilized to ensure compatibility.  See the `MinecraftElements Compatibility Table`_ for compatible versions of `MinecraftElements` and `MinecraftBridge`.

.. _MinecraftElements Compatibility Table:

.. table:: Minecraft Compatibility Table

+-------------------------+---------------------------+
| MinecraftBridge Vesrion | MinecraftElements Version |
+=========================+===========================+
| 0.4.0b1                 | 0.3.2b                    |
+-------------------------+---------------------------+
| 0.2.3                   | 0.1.1                     |
+-------------------------+---------------------------+


Installation using pip
----------------------

This module can be installed as a package using `pip`.  Assuming `pip` is installed, the package can be installed (for users) from the root folder by::

    pip install --user -e .

Once installed, the module can be imported from arbitrary locations.


Adding as a Submodule to a Project
----------------------------------

As an alternative, this repository could be cloned into existing code as a *submodule*.  This can be done with the following command::

    git submodule add https://gitlab.com/cmu_asist/MinecraftElements

If the generated folder is empty, a recursive update may need to be performed::

    git submodule update --init --recursive

(See `Working with Submodules`_)

Additionally, cloning a repo with this submodule will require the `recursive` flag::

    git clone --recursive <project url>



Documentation
-------------
Documentation for this module can be built using `Sphinx`_, which is also installed with `pip`_.  The source and build files for the documentation is in the `docs` folder.


Requirements
~~~~~~~~~~~~
Note that build targets may require additional dependencies to be installed.  For building a PDF of the documentation using Latex, basic Latex dependencies need to be installed.  On Ubuntu-based systems, this can be done by installing the following packages using `aptitude`::

    apt-get install texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended


Building Documentation
~~~~~~~~~~~~~~~~~~~~~~
To build a PDF of the *MinecraftBridge Manual*, from the `docs` folder, run the build command with the latexpdf target::

    cd docs
    make latexpdf

This will create a `build` subfolder, and `latex` subfolder within build.  The final pdf file, `MinecraftBridge_Manual.pdf` will be written to the `latex` subfolder, which can be moved to the root directory easily.  In Latex or OSX, this is done with::

    mv build/latex/MinecraftBridge_Manual.pdf ..

While in Windows, this would be done by::

    move build\latex\MinecraftBridge_Manual.pdf ..



.. _pip: https://pip.pypa.io/en/stable/

.. _Working with Submodules: https://github.blog/2016-02-01-working-with-submodules/

.. _Sphinx: https://www.sphinx-doc.org/en/master/

.. _MinecraftElements: https://www.gitlab.com/cmu_asist/MinecraftElements