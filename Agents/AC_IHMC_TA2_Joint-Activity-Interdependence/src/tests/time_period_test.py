from src.utils.time_period import TimePeriod, does_overlap, get_overlap_union, contains_overlapping_set, \
    get_non_overlapping_set, get_non_overlap_union, get_uniquely_non_overlapping_set

print("CHECKING UNION")
time_period1 = TimePeriod(3, 6)
print('1: ' + time_period1.to_string() + ' has a duration of ' + str(time_period1.duration))

time_period2 = TimePeriod(5, 10)
print('2: ' + time_period2.to_string() + ' has a duration of ' + str(time_period2.duration))

print("does 1 and 2 overlap = " + str(does_overlap(time_period1, time_period2)))
union_period = get_overlap_union(time_period1, time_period2)
print('union of 1 and 2: ' + union_period.to_string() + ' has a duration of ' + str(union_period.duration))

print()
print("CHECKING SETS")
time_period3 = TimePeriod(12, 14)
print('3: ' + time_period3.to_string() + ' has a duration of ' + str(time_period3.duration))
time_period_set1 = [time_period3, time_period1, time_period2]
print(str(time_period_set1))
time_period_set1.sort(key=lambda x: (x.start, x.end))
print(str(time_period_set1))
print('contains overlapping periods = ' + str(contains_overlapping_set(time_period_set1)))
not_overlapping_set = get_non_overlapping_set(time_period_set1)
print('non-overlapping set = ' + str(not_overlapping_set))
print('contains overlapping periods = ' + str(contains_overlapping_set(not_overlapping_set)))

print()
print("CHECKING FULLY CONTAINED TIMEPERIOD IN UNION")
tp1 = TimePeriod(64412, 64412)
print('tp1: ' + tp1.to_string() + ' has a duration of ' + str(tp1.duration))
tp2 = TimePeriod(45593, 64416)
print('tp2: ' + tp2.to_string() + ' has a duration of ' + str(tp2.duration))
print(does_overlap(tp1, tp2))
tp_set = [tp1, tp2]
print('contains overlapping periods = ' + str(contains_overlapping_set(tp_set)))
not_overlapping_set = get_non_overlapping_set(tp_set)
print('non-overlapping set = ' + str(not_overlapping_set))
union_period = get_overlap_union(tp1, tp2)
print('union of 1 and 2: ' + union_period.to_string() + ' has a duration of ' + str(union_period.duration))

print()
print("CHECKING DURATION FOR INCOMPLETE TASKS")
tp0 = TimePeriod(64412, -1)
print('tp0: ' + tp0.to_string() + ' has a duration of ' + str(tp0.duration))
tp0.end = 70000
print('tp0: ' + tp0.to_string() + ' has a duration of ' + str(tp0.duration))

print()
print("CHECKING BUG")
tp01 = TimePeriod(54292, 66147)
tp02 = TimePeriod(54292, 54292)
tp03 = TimePeriod(54292, 66147)
tp04 = TimePeriod(54292, 54292)
print("does 2 overlap 4 = " + str(does_overlap(tp02, tp04)))
tp_set = [tp02, tp04]
print(tp_set)
print('contains overlapping periods = ' + str(contains_overlapping_set(tp_set)))
not_overlapping_set = get_non_overlapping_set(tp_set)
print('non-overlapping set = ' + str(not_overlapping_set))

print()
print("CHECKING BUG")
print("does 2 overlap 3 = " + str(does_overlap(tp02, tp03)))
tp_set = [tp02, tp03]
print(tp_set)
print('contains overlapping periods = ' + str(contains_overlapping_set(tp_set)))
not_overlapping_set = get_non_overlapping_set(tp_set)
print('non-overlapping set = ' + str(not_overlapping_set))

print()
print("CHECKING BUG")
tp_set = [tp01, tp02, tp03, tp04]
print(tp_set)
print('contains overlapping periods = ' + str(contains_overlapping_set(tp_set)))
not_overlapping_set = get_non_overlapping_set(tp_set)
print('non-overlapping set = ' + str(not_overlapping_set))

print()
print("TESTING NON-OVERLAPPING CHECK")
tp01 = TimePeriod(1000, 5000)
tp02 = TimePeriod(4000, 7000)
tp03 = TimePeriod(6000, 7000)
tp04 = TimePeriod(5000, 5000)
print(tp01)
print(tp02)
print("does 1 overlap 2 = " + str(does_overlap(tp01, tp02)))
print("non-overlapping duration = " + str(get_non_overlap_union(tp01, tp02)))
print(tp02)
print(tp03)
print("does 2 overlap 3 = " + str(does_overlap(tp02, tp03)))
print("non-overlapping duration = " + str(get_non_overlap_union(tp02, tp03)))
print(tp01)
print(tp03)
print("does 1 overlap 3 = " + str(does_overlap(tp01, tp03)))
print("non-overlapping duration = " + str(get_non_overlap_union(tp01, tp03)))
print(tp01)
print(tp04)
print("does 1 overlap 4 = " + str(does_overlap(tp01, tp04)))
print("non-overlapping duration = " + str(get_non_overlap_union(tp01, tp04)))

print()
print("TESTING NON-OVERLAPPING SET CHECK")
tp_set = [tp01, tp02]
print(tp_set)
print('contains overlapping periods = ' + str(contains_overlapping_set(tp_set)))
not_overlapping_set = get_uniquely_non_overlapping_set(tp_set)
print('non-overlapping set = ' + str(not_overlapping_set))
tp_set = [tp01, tp02, tp03]
print(tp_set)
print('contains overlapping periods = ' + str(contains_overlapping_set(tp_set)))
not_overlapping_set = get_uniquely_non_overlapping_set(tp_set)
print('non-overlapping set = ' + str(not_overlapping_set))
tp01 = TimePeriod(1000, 5000)
tp02 = TimePeriod(3000, 4000)
tp03 = TimePeriod(6000, 7000)
tp_set = [tp01, tp02]
print(tp_set)
print('contains overlapping periods = ' + str(contains_overlapping_set(tp_set)))
not_overlapping_set = get_uniquely_non_overlapping_set(tp_set)
print('non-overlapping set = ' + str(not_overlapping_set))
tp_set = [tp01, tp02, tp03]
print(tp_set)
print('contains overlapping periods = ' + str(contains_overlapping_set(tp_set)))
not_overlapping_set = get_uniquely_non_overlapping_set(tp_set)
print('non-overlapping set = ' + str(not_overlapping_set))

print()
print("TESTING NON-OVERLAPPING SET WITH EQUAL TIME PERIODS CHECK")
tp01 = TimePeriod(1000, 5000)
tp02 = TimePeriod(1000, 5000)
tp_set = [tp01, tp02]
print(tp_set)
print('contains overlapping periods = ' + str(contains_overlapping_set(tp_set)))
not_overlapping_set = get_uniquely_non_overlapping_set(tp_set)
print('non-overlapping set = ' + str(not_overlapping_set))

print("CHECKING EQUALS")
time_period1 = TimePeriod(3, 6)
time_period2 = TimePeriod(5, 10)
time_period3 = TimePeriod(3, 10)
time_period4 = TimePeriod(5, 6)
time_period5 = TimePeriod(3, 6)

print(str(time_period1.to_string()) + ' == ' + str(time_period1.to_string()) + " = " + str(time_period1 == time_period1))
print(str(time_period1.to_string()) + ' == ' + str(time_period2.to_string()) + " = " + str(time_period1 == time_period2))
print(str(time_period1.to_string()) + ' == ' + str(time_period3.to_string()) + " = " + str(time_period1 == time_period3))
print(str(time_period1.to_string()) + ' == ' + str(time_period4.to_string()) + " = " + str(time_period1 == time_period4))
print(str(time_period1.to_string()) + ' == ' + str(time_period5.to_string()) + " = " + str(time_period1 == time_period5))

